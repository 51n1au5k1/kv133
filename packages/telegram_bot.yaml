# packages/telegram_bot.yaml
# ====================================================================
# Пакет: Telegram Bot для Home Assistant
# ====================================================================
# Этот пакет реализует управление умным домом через Telegram-бота.
# Пользователь может отправлять команды боту и получать актуальный
# статус различных устройств и комнат.
#
# Функционал включает:
# - Вывод текущего состояния помещений (температура, влажность, CO₂ и т. д.).
# - Управление освещением, розетками, вентиляцией и другими устройствами.
# - Контроль состояния сервера и сети (температура, пинг, скорость интернета).
# - Возможность перезагрузки Home Assistant из Telegram.
#
# ====================================================================
# Почему используем скрипты?
# ====================================================================
# В пакете активно используются скрипты для генерации сообщений с
# состоянием и управления устройствами. Это позволяет:
# - Избежать дублирования кода в автоматизациях.
# - Упростить обслуживание: если нужно изменить формат сообщения,
#   достаточно поправить только скрипт.
# - Автоматически обновлять интерфейс Telegram после выполнения действий.
#
# Пример:
# Вместо того чтобы в каждой автоматизации заново прописывать
# формат сообщения, мы создаем один скрипт (например, `send_livingroom_status`),
# а затем вызываем его во всех соответствующих автоматизациях.
#
# ====================================================================
# Структура пакета:
# ====================================================================
# script:
#   - Скрипты для отправки информации в Telegram.
#
# automation:
#   - Обработчики команд и нажатий кнопок.
#   - Автоматизации для переключения устройств.
#
# ====================================================================
# Разделы меню Telegram:
# ====================================================================
# /main_menu       - Главное меню
# /livingroom_control - Гостиная
# /kitchen_control  - Кухня
# /workroom_control - Рабочий кабинет
# /bedroom_control - Спальня
# /bathroom_control   - Ванная
# /hallway_control - Прихожая
# /system_control  - Система (состояние сервера и сети)
# /pve_status_refresh - Система виртуализации Proxmox Virtual Environment
#
# ====================================================================
# Специфика реализации:
# ====================================================================
# - Каждое действие в Telegram сопровождается удалением предыдущего
#   сообщения, чтобы интерфейс оставался чистым и удобным.
# - В ответах всегда есть кнопка "Обновить", чтобы получить
#   актуальное состояние устройств.
# - В случае управления переключаемыми устройствами (свет, розетки)
#   после выполнения команды автоматически отправляется обновленный
#   статус.
#
# ====================================================================
# Особенности кнопки принудительной перезагрузки:
# ====================================================================
# - Запускает `homeassistant.restart`, полностью перезапуская HA.
# - Перед этим отправляет предупреждение пользователю.
# - Включена задержка в 5 секунд для безопасности.
#
# Доработки:
# - Добавлена обработка unavailable states (default 'N/A').
# - Общий скрипт для toggle (toggle_device с params).
# - Confirmation для reboot (новая кнопка /confirm_reboot).
# - silent_mode/startup_phase в triggers.
# - Input_number для delay, логирование событий.
#
# ====================================================================

input_number:
  telegram_delay_ms:
    name: "Задержка в Telegram-боте (ms)"
    min: 100
    max: 1000
    step: 50
    initial: 200
    icon: mdi:timer-sand

input_boolean:
  telegram_bot_log_commands:
    name: "Логировать команды Telegram"
    initial: true
    icon: mdi:math-log

# Скрипты для отправки информации в Telegram

script:
  toggle_device:
    alias: "Общий скрипт для toggle устройства и обновления меню"
    fields:
      entity:
        description: "Entity ID для toggle"
        required: true
      domain:
        description: "Domain (light/switch/fan)"
        required: true
      menu_script:
        description: "Скрипт для отправки обновлённого меню"
        required: true
      message_id:
        description: "ID сообщения для удаления"
        required: true
      chat_id:
        description: "ID чата"
        required: true
      user_id:
        description: "ID пользователя"
        required: false
    sequence:
      - service: >-
          {% if domain == 'climate' %}
            climate.turn_{{ 'on' if is_state(entity, 'off') else 'off' }}
          {% else %}
            {{ domain }}.toggle
          {% endif %}
        target:
          entity_id: "{{ entity }}"
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ message_id }}"
          chat_id: "{{ chat_id }}"
      - service: "{{ menu_script }}"
        data:
          target: "{{ chat_id }}"
      - service: system_log.write
        data:
          message: "Toggle {{ entity }} через Telegram (user: {{ user_id | default('unknown') }})"
          level: info

  send_main_menu:
    alias: "Send Main Menu"
    sequence:
      - service: telegram_bot.send_message
        data:
          target: "{{ target }}"
          parse_mode: html
          message: |
            <b>💻 Выбрать комнату для управления :</b>
          inline_keyboard: >
            {{ [
                [ ["🏠 Гостиная", "/livingroom_control"], ["🍽 Кухня", "/kitchen_control"] ],
                [ ["🏢 Рабочий кабинет", "/workroom_control"], ["🛏 Спальня", "/bedroom_control"] ],
                [ ["🛁 Ванная", "/bathroom_control"], ["🚪 Коридор", "/hallway_control"] ],
                [ ["🖥 Система", "/system_control"] ]
              ] | tojson }}

  send_livingroom_status:
    alias: "Send Living Room Status"
    sequence:
      - service: telegram_bot.send_message
        data:
          target: "{{ target }}"
          parse_mode: html
          message: |
            <b>🏠 Текущее состояние в гостиной:</b>
            🌡 <b>Температура:</b> {{ states('sensor.livingroom_climat_sensor_temperature') | default('N/A') }}°C
            💧 <b>Влажность:</b> {{ states('sensor.livingroom_climat_sensor_humidity') | default('N/A') }}%
            🌿 <b>CO₂:</b> {{ states('sensor.co2_monitor_co2') | default('N/A') }} ppm
            💨 <b>PM2.5:</b> {{ states('sensor.zhimi_cn_271517251_mb3_pm2_5_density_p_3_6') | default('N/A') }} µg/m³
            🚪 <b>Статус дверей:</b> {% if is_state('binary_sensor.gostinaia_balkon_contact','on') or is_state('binary_sensor.0x00158d0003ce9922_contact','on') %}Открыта{% else %}Закрыта{% endif %}
          inline_keyboard: >
            {{ [
                [ ["🔴 Люстра" if is_state("light.livingroom_main_switch_left", "off") else "🟢 Люстра", "/toggle_livingroom_main_switch_left"],
                  ["🔴 Свет над диваном" if is_state("light.livingroom_main_switch_right", "off") else "🟢 Свет над диваном", "/toggle_livingroom_main_switch_right"],
                  ["🔴 Бра" if is_state("light.livingroom_scone_dimmer", "off") else "🟢 Бра", "/toggle_livingroom_scone_dimmer"] ],
                [ ["🔴 Кондиционер" if is_state("climate.konditsioner", "off") else "🟢 Кондиционер", "/toggle_livingroom_konditsioner"],
                  ["🔴 Очиститель" if is_state("fan.zhimi_cn_271517251_mb3_s_2_air_purifier", "off") else "🟢 Очиститель", "/toggle_livingroom_air_purifier"],
                  ["🔴 Увлажнитель" if is_state("humidifier.xiaomi_cn_823407205_p3", "off") else "🟢 Увлажнитель", "/toggle_livingroom_humidifier"] ],
                [ ["🔴 Угловая розетка" if is_state("switch.livingroom_socket_corner_r", "off") else "🟢 Угловая розетка", "/toggle_livingroom_socket_corner_r"],
                  ["🔴 Левая розетка" if is_state("switch.livingroom_socket_l", "off") else "🟢 Левая розетка", "/toggle_livingroom_socket_l"],
                  ["🔴 Правая розетка" if is_state("switch.livingroom_socket_r", "off") else "🟢 Правая розетка", "/toggle_livingroom_socket_r"] ],
                [ ["👈 В меню", "/menu_back"], ["↻ Обновить", "/livingroom_control"] ]
              ] | tojson }}

  send_workroom_status:
    alias: "Send Workroom Status"
    sequence:
      - service: telegram_bot.send_message
        data:
          target: "{{ target }}"
          parse_mode: html
          message: |
            <b>🏢 Текущее состояние в рабочем кабинете:</b>
            <b>🌡 Температура:</b> {{ states('sensor.cgllc_cn_blt_3_15gd8656slo00_dove_temperature_p_2_1') | default('N/A') }}°C
            <b>💧 Влажность:</b> {{ states('sensor.cgllc_cn_blt_3_15gd8656slo00_dove_relative_humidity_p_2_2') | default('N/A') }}%
            <b>🚪 Статус двери:</b> {% if is_state('binary_sensor.masterskaia_balkon_contact', 'on') %}Открыта{% else %}Закрыта{% endif %}
          inline_keyboard: >
            {{ [
                [ ["🔴 Основной свет" if is_state("light.workroom_switch", "off") else "🟢 Основной свет", "/toggle_workroom_light"],
                  ["🔴 Подсветка" if is_state("light.working_room_led", "off") else "🟢 Подсветка", "/toggle_workroom_led"] ],
                [ ["🔴 Розетка отпаривателя" if is_state("switch.smart_plug_in_unit_vykliuchatel", "off") else "🟢 Розетка отпаривателя", "/toggle_workroom_plug"] ],
                [ ["👈 В меню", "/menu_back"], ["↻ Обновить", "/workroom_control"] ]
              ] | tojson }}

  send_bedroom_status:
    alias: "Send Bedroom Status"
    sequence:
      - service: telegram_bot.send_message
        data:
          target: "{{ target }}"
          parse_mode: html
          message: |
            <b>🛏 Текущее состояние в спальне:</b>
            <b>🌡 Температура:</b> {{ states('sensor.bedroom_th_sensor_temperature') | default('N/A') }}°C
            <b>💧 Влажность:</b> {{ states('sensor.bedroom_th_sensor_humidity') | default('N/A') }}%
            <b>🚪 Статус двери:</b> {% if is_state('binary_sensor.0x00158d00044d5d11_contact', 'on') %}Открыта{% else %}Закрыта{% endif %}
          inline_keyboard: >
            {{ [
                [ ["🔴 Основной свет" if is_state("light.bedroom_switch_main", "off") else "🟢 Основной свет", "/toggle_bedroom_light"] ],
                [ ["🔴 Светильник Слева" if is_state("light.bedroom_left_switch_right", "off") else "🟢 Светильник Слева", "/toggle_bedroom_scone_t"] ],
                [ ["🔴 Светильник Справа малый" if is_state("light.bedroom_right_switch_left", "off") else "🟢 Светильник Справа малый", "/toggle_bedroom_scone_a_small"],
                  ["🔴 Светильник Справа большой" if is_state("light.bedroom_right_switch_right", "off") else "🟢 Светильник Справа большой", "/toggle_bedroom_scone_a_big"] ],
                [ ["🔴 Розетка Слева" if is_state("switch.0x00158d0002530bd9", "off") else "🟢 Розетка Слева", "/toggle_bedroom_plug_left"],
                  ["🔴 Розетка Справа" if is_state("switch.0x00158d0002530ba3", "off") else "🟢 Розетка Справа", "/toggle_bedroom_plug_right"] ],
                [ ["👈 В меню", "/menu_back"], ["↻ Обновить", "/bedroom_control"] ]
              ] | tojson }}

  send_bathroom_status:
    alias: "Send Bathroom Status"
    sequence:
      - service: telegram_bot.send_message
        data:
          target: "{{ target }}"
          parse_mode: html
          message: |
            <b>🛁 Текущее состояние в ванной:</b>
            <b>🌡 Температура:</b> {{ states('sensor.bathroom_th_2_temperature') | default('N/A') }}°C
            <b>💧 Влажность:</b> {{ states('sensor.bathroom_th_2_humidity') | default('N/A') }}%
            <b>🚪 Статус двери:</b> {% if is_state('binary_sensor.bathroom_open_door', 'on') %}Открыта{% else %}Закрыта{% endif %}
            <b>🧺 Стиральная машина:</b> {% if is_state('binary_sensor.washing_machine_active', 'on') %}🟢 Работает{% else %}🔴 Не работает{% endif %}
          inline_keyboard: >
            {{ [
                [ ["🔴 Весь свет" if is_state("light.light_bathroom", "off") else "🟢 Весь свет", "/toggle_bathroom_light"] ],
                [ ["🔴 Вытяжка" if is_state("fan.bathroom_relay_l1", "off") else "🟢 Вытяжка", "/toggle_bathroom_fan"] ],
                [ ["👈 В меню", "/menu_back"], ["↻ Обновить", "/bathroom_control"] ]
              ] | tojson }}

  send_kitchen_status:
    alias: "Send Kitchen Status"
    sequence:
      - service: telegram_bot.send_message
        data:
          target: "{{ target }}"
          parse_mode: html
          message: |
            <b>🍽 Текущее состояние на кухне:</b>
            <b>🌡 Температура:</b> {{ states('sensor.kitchen_th_temperature') | default('N/A') }}°C
            <b>💧 Влажность:</b> {{ states('sensor.kitchen_th_humidity') | default('N/A') }}%
            <b>🚪 Статус двери:</b> {% if is_state('binary_sensor.0x00158d0003ce9922_contact', 'on') %}Открыта{% else %}Закрыта{% endif %}
          inline_keyboard: >
            {{ [
                [ ["🔴 Основной" if is_state("light.kitchen_main_light", "off") else "🟢 Основной", "/toggle_kitchen_main_light"],
                  ["🔴 Подсветка" if is_state("switch.kitchen_fartuh", "off") else "🟢 Подсветка", "/toggle_kitchen_fartuh"] ],
                [ ["👈 В меню", "/menu_back"], ["↻ Обновить", "/kitchen_control"] ]
              ] | tojson }}

  send_hallway_status:
    alias: "Send Hallway Status"
    sequence:
      - service: telegram_bot.send_message
        data:
          target: "{{ target }}"
          parse_mode: html
          message: |
            <b>🚪 Текущее состояние в прихожей:</b>
            <b>🚪 Статус двери:</b> {% if is_state('binary_sensor.hallway_door_contact', 'on') %}Открыта{% else %}Закрыта{% endif %}
          inline_keyboard: >
            {{ [
                [ ["🔴 Свет" if is_state("light.hallway_switch", "off") else "🟢 Свет", "/toggle_hallway_light"],
                  ["🔴 Шлюз" if is_state("light.gateway_light_04cf8c977cdd", "off") else "🟢 Шлюз", "/toggle_hallway_gateway_light"] ],
                [ ["👈 В меню", "/menu_back"], ["↻ Обновить", "/hallway_control"] ]
              ] | tojson }}

  send_system_status:
    alias: "Send System Status"
    sequence:
      - service: telegram_bot.send_message
        data:
          target: "{{ target }}"
          parse_mode: html
          message: |
            <b>🖥 Текущее состояние системы:</b>
            <b>🌡 Климат около сервера:</b>
            <b>Температура:</b> {{ states('sensor.0xa4c13861a18df7c8_temperature') | default('N/A') }}°C
            <b>💧 Влажность:</b> {{ states('sensor.0xa4c13861a18df7c8_humidity') | default('N/A') }}%

            <b>🌍 Скорость сети интернет:</b>
            <b>📡 Пинг:</b> {{ states('sensor.speedtest_ping') | default('N/A') }} ms
            <b>⬇️ Загрузка:</b> {{ states('sensor.speedtest_download') | default('N/A') }} Mbps
            <b>⬆️ Передача:</b> {{ states('sensor.speedtest_upload') | default('N/A') }} Mbps
          inline_keyboard: >
            {{ [
                [ ["🔴 Роутер" if is_state("switch.my_multi_outlet_left", "off") else "🟢 Роутер", "/toggle_router_socket"],
                  ["🔴 МиниПК" if is_state("switch.my_multi_outlet_right", "off") else "🟢 МиниПК", "/toggle_minipc_socket"] ],
                [ ["🔴 Питание ванной" if is_state("light.bathroom_main", "off") else "🟢 Питание ванной", "/toggle_bathroom_power"] ],
                [ ["🔴 Режим тишины" if is_state("input_boolean.silent_mode", "off") else "🟢 Режим тишины", "/toggle_silent_mode"] ],
                [ ["🔴 Режим Force CCTV Off" if is_state("input_boolean.force_camera_off", "off") else "🟢 Режим Force CCTV Off", "/toggle_force_cctv_mode"] ],
                [ ["⚠️ Система виртуализации", "/pve_status_refresh"] ],
                [ ["⚠️ Перезагрузить систему", "/confirm_reboot"] ],
                [ ["👈 В меню", "/menu_back"], ["↻ Обновить", "/system_control"] ]
              ] | tojson }}

  send_pve_status:
    alias: "Отправить статус PVE"
    sequence:
      - service: telegram_bot.send_message
        data:
          target: "{{ target }}"
          parse_mode: html
          message: |
            <b>🖥 Статус нод и контейнеров</b>

            <b>📊 Запущенные ВМ:</b> {{ states('sensor.node_pve_virtual_machines_running') | default('N/A') }}
            <b>📊 Запущенные контейнеры:</b> {{ states('sensor.node_pve_containers_running') | default('N/A') }}

            <b>🔥 Нагрузка CPU:</b>
            <b>VM HAOS12:</b> {{ states('sensor.qemu_haos12_3_100_cpu_used_normalized') | float(0) | round(0) }}% | {{ states('sensor.qemu_haos12_3_100_cpu_used') | float(0) | round(0) }}%
            <b>LXC MariaDB:</b> {{ states('sensor.lxc_mariadb_101_cpu_used_normalized') | float(0) | round(0) }}% | {{ states('sensor.lxc_mariadb_101_cpu_used') | float(0) | round(0) }}%
            <b>LXC Jackett:</b> {{ states('sensor.lxc_jackett_102_cpu_used_normalized') | float(0) | round(0) }}% | {{ states('sensor.lxc_jackett_102_cpu_used') | float(0) | round(0) }}%
            <b>LXC Jellyfin:</b> {{ states('sensor.lxc_jellyfin_103_cpu_used_normalized') | float(0) | round(0) }}% | {{ states('sensor.lxc_jellyfin_103_cpu_used') | float(0) | round(0) }}%
            <b>LXC Deluge:</b> {{ states('sensor.lxc_deluge_104_cpu_used_normalized') | float(0) | round(0) }}% | {{ states('sensor.lxc_deluge_104_cpu_used') | float(0) | round(0) }}%
            <b>LXC TorrServer:</b> {{ states('sensor.lxc_debian_105_cpu_used_normalized') | float(0) | round(0) }}% | {{ states('sensor.lxc_debian_105_cpu_used') | float(0) | round(0) }}%
            <b>LXC Minim Server:</b> {{ states('sensor.lxc_minim_107_cpu_used_normalized') | float(0) | round(0) }}% | {{ states('sensor.lxc_minim_107_cpu_used') | float(0) | round(0) }}%

          inline_keyboard: >
            {{ [
                [ ["🔄 Обновить", "/pve_status_refresh"] ],
                [ ["🔄 Перезагрузить HAOS12", "/reboot_haos12"] ],
                [ ["🟢 MariaDB", "/start_mariadb"], ["🔴 Остановить", "/stop_mariadb"], ["🔄 Перезагрузка", "/reboot_mariadb"] ],
                [ ["🟢 Jackett", "/start_jackett"], ["🔴 Остановить", "/stop_jackett"], ["🔄 Перезагрузка", "/reboot_jackett"] ],
                [ ["🟢 Jellyfin", "/start_jellyfin"], ["🔴 Остановить", "/stop_jellyfin"], ["🔄 Перезагрузка", "/reboot_jellyfin"] ],
                [ ["🟢 Deluge", "/start_deluge"], ["🔴 Остановить", "/stop_deluge"], ["🔄 Перезагрузка", "/reboot_deluge"] ],
                [ ["🟢 TorrServer", "/start_torrserver"], ["🔴 Остановить", "/stop_torrserver"], ["🔄 Перезагрузка", "/reboot_torrserver"] ],
                [ ["🟢 MinimServer", "/start_minimserver"], ["🔴 Остановить", "/stop_minimserver"], ["🔄 Перезагрузка", "/reboot_minimserver"] ],
                [ ["👈 В меню", "/menu_back"] ]
              ] | tojson }}

  pve_action:
    alias: "PVE Action with Delay"
    fields:
      button: { required: true }
      chat_id: { required: true }
    sequence:
      - service: button.press
        target:
          entity_id: "{{ button }}"
      - delay:
          seconds: 5
      - service: script.send_pve_status
        data:
          target: "{{ chat_id }}"

automation:
  # Приветственное сообщение (при вводе команды /start)
  - id: "telegram_bot_start"
    alias: "Telegram Bot Start (Приветствие)"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_command
        event_data:
          command: "/start"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.send_message
        data:
          target: "{{ trigger.event.data.chat_id }}"
          parse_mode: html
          message: "<b>Добро пожаловать в умный дом!</b>"
      - service: script.send_main_menu
        data:
          target: "{{ trigger.event.data.chat_id }}"
      - service: system_log.write
        data:
          message: "Telegram бот запущен (user: {{ trigger.event.data.user_id }})"
          level: info

  ##############################################################################
  # Обработчики меню
  ##############################################################################
  # Главное меню (при вводе команды /main_menu)
  - id: "telegram_bot_main_menu"
    alias: "Telegram Bot Main Menu"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_command
        event_data:
          command: "/main_menu"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.send_main_menu
        data:
          target: "{{ trigger.event.data.chat_id }}"

  # Обработчик кнопки "В меню"
  - id: "telegram_bot_menu_back"
    alias: "Telegram Bot Menu Back"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/menu_back"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
      - service: script.send_main_menu
        data:
          target: "{{ trigger.event.data.chat_id }}"

  # Обработчик меню "Гостиная"
  - id: "telegram_bot_livingroom_control"
    alias: "Telegram Bot Living Room Menu"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/livingroom_control"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
      - service: script.send_livingroom_status
        data:
          target: "{{ trigger.event.data.chat_id }}"

  # Обработчик меню "Рабочий кабинет"
  - id: "telegram_bot_workroom_control"
    alias: "Telegram Bot Workroom Menu"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/workroom_control"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
      - service: script.send_workroom_status
        data:
          target: "{{ trigger.event.data.chat_id }}"

  # Обработчик меню "Спальня"
  - id: "telegram_bot_bedroom_control"
    alias: "Telegram Bot Bedroom Menu"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/bedroom_control"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
      - service: script.send_bedroom_status
        data:
          target: "{{ trigger.event.data.chat_id }}"

  # Обработчик меню "Кухня"
  - id: "telegram_bot_kitchen_control"
    alias: "Telegram Bot Kitchen Menu"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/kitchen_control"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
      - service: script.send_kitchen_status
        data:
          target: "{{ trigger.event.data.chat_id }}"

  # Обработчик меню "Ванная"
  - id: "telegram_bot_bathroom_control"
    alias: "Telegram Bot Bathroom Menu"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/bathroom_control"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
      - service: script.send_bathroom_status
        data:
          target: "{{ trigger.event.data.chat_id }}"

  # Обработчик меню "Прихожая"
  - id: "telegram_bot_hallway_control"
    alias: "Telegram Bot Hallway Menu"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/hallway_control"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
      - service: script.send_hallway_status
        data:
          target: "{{ trigger.event.data.chat_id }}"

  # Обработчик меню "Система"
  - id: "telegram_bot_system_control"
    alias: "Telegram Bot System Control"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/system_control"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
      - service: script.send_system_status
        data:
          target: "{{ trigger.event.data.chat_id }}"

  ##############################################################################
  # Гостиная (используем общий toggle_device)
  ##############################################################################
  - id: "telegram_bot_toggle_livingroom_main_switch_left"
    alias: "Telegram Bot Toggle Livingroom Main Switch Left"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_livingroom_main_switch_left"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.livingroom_main_switch_left
          domain: light
          menu_script: script.send_livingroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_livingroom_main_switch_right"
    alias: "Telegram Bot Toggle Livingroom Main Switch Right"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_livingroom_main_switch_right"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.livingroom_main_switch_right
          domain: light
          menu_script: script.send_livingroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_livingroom_scone_dimmer"
    alias: "Telegram Bot Toggle Livingroom Scone Dimmer"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_livingroom_scone_dimmer"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.livingroom_scone_dimmer
          domain: light
          menu_script: script.send_livingroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  # Гостиная - розетки
  - id: "telegram_bot_toggle_livingroom_socket_corner_r"
    alias: "Telegram Bot Toggle Livingroom Socket Corner R"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_livingroom_socket_corner_r"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: switch.livingroom_socket_corner_r
          domain: switch
          menu_script: script.send_livingroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_livingroom_socket_l"
    alias: "Telegram Bot Toggle Livingroom Socket L"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_livingroom_socket_l"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: switch.livingroom_socket_l
          domain: switch
          menu_script: script.send_livingroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_livingroom_socket_r"
    alias: "Telegram Bot Toggle Livingroom Socket R"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_livingroom_socket_r"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: switch.livingroom_socket_r
          domain: switch
          menu_script: script.send_livingroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"
  # Гостиная - климатическая техника
  - id: "toggle_livingroom_humidifier"
    alias: "Telegram Bot Toggle Livingroom Humidifier"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_livingroom_humidifier"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: humidifier.xiaomi_cn_823407205_p3
          domain: humidifier
          menu_script: script.send_livingroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "toggle_livingroom_air_purifier"
    alias: "Telegram Bot Toggle Livingroom Air Purifier"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_livingroom_air_purifier"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: fan.zhimi_cn_271517251_mb3_s_2_air_purifier
          domain: fan
          menu_script: script.send_livingroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "toggle_livingroom_konditsioner"
    alias: "Telegram Bot Toggle Livingroom Konditsioner"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_livingroom_konditsioner"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: climate.konditsioner
          domain: climate
          menu_script: script.send_livingroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  ##############################################################################
  # Кабинет (используем общий toggle_device)
  ##############################################################################
  - id: "telegram_bot_toggle_workroom_light"
    alias: "Telegram Bot Toggle Workroom Light"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_workroom_light"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.workroom_switch
          domain: light
          menu_script: script.send_workroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_workroom_led"
    alias: "Telegram Bot Toggle Workroom LED"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_workroom_led"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.working_room_led
          domain: light
          menu_script: script.send_workroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_workroom_plug"
    alias: "Telegram Bot Toggle Workroom Plug"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_workroom_plug"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: switch.smart_plug_in_unit_vykliuchatel
          domain: switch
          menu_script: script.send_workroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  ##############################################################################
  # Спальня (используем общий toggle_device)
  ##############################################################################
  - id: "telegram_bot_toggle_bedroom_light"
    alias: "Telegram Bot Toggle Bedroom Light"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_bedroom_light"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.bedroom_switch_main
          domain: light
          menu_script: script.send_bedroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_bedroom_scone_t"
    alias: "Telegram Bot Toggle Bedroom Tatiana's Scone"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_bedroom_scone_t"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.bedroom_left_switch_right
          domain: light
          menu_script: script.send_bedroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_bedroom_scone_a_small"
    alias: "Telegram Bot Toggle Bedroom Andrei's Scone Small"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_bedroom_scone_a_small"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.bedroom_right_switch_left
          domain: light
          menu_script: script.send_bedroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_bedroom_scone_a_big"
    alias: "Telegram Bot Toggle Bedroom Andrei's Scone Big"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_bedroom_scone_a_big"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.bedroom_right_switch_right
          domain: light
          menu_script: script.send_bedroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_bedroom_plug_left"
    alias: "Telegram Bot Toggle Bedroom Plug Left"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_bedroom_plug_left"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: switch.0x00158d0002530bd9
          domain: switch
          menu_script: script.send_bedroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_bedroom_plug_right"
    alias: "Telegram Bot Toggle Bedroom Plug Right"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_bedroom_plug_right"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: switch.0x00158d0002530ba3
          domain: switch
          menu_script: script.send_bedroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  ##############################################################################
  # Кухня (используем общий toggle_device)
  ##############################################################################
  - id: "telegram_bot_toggle_kitchen_main_light"
    alias: "Telegram Bot Toggle Kitchen Main Light"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_kitchen_main_light"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.kitchen_main_light
          domain: light
          menu_script: script.send_kitchen_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_kitchen_fartuh"
    alias: "Telegram Bot Toggle Kitchen Fartuh"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_kitchen_fartuh"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: switch.kitchen_fartuh
          domain: switch
          menu_script: script.send_kitchen_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  ##############################################################################
  # Ванная (используем общий toggle_device)
  ##############################################################################
  - id: "telegram_bot_toggle_bathroom_light"
    alias: "Telegram Bot Toggle Bathroom Light"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_bathroom_light"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.light_bathroom
          domain: light
          menu_script: script.send_bathroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_bathroom_fan"
    alias: "Telegram Bot Toggle Bathroom Fan"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_bathroom_fan"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: fan.bathroom_relay_l1
          domain: fan
          menu_script: script.send_bathroom_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  ##############################################################################
  # Прихожая (используем общий toggle_device)
  ##############################################################################
  - id: "telegram_bot_toggle_hallway_light"
    alias: "Telegram Bot Toggle Hallway Light"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_hallway_light"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.hallway_switch
          domain: light
          menu_script: script.send_hallway_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_hallway_gateway_light"
    alias: "Telegram Bot Toggle Hallway Gateway Light"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_hallway_gateway_light"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.gateway_light_04cf8c977cdd
          domain: light
          menu_script: script.send_hallway_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  ##############################################################################
  # Система (используем общий toggle_device)
  ##############################################################################
  - id: "telegram_bot_toggle_router_socket"
    alias: "Telegram Bot Toggle Router Socket"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_router_socket"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: switch.my_multi_outlet_left
          domain: switch
          menu_script: script.send_system_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_minipc_socket"
    alias: "Telegram Bot Toggle MiniPC Socket"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_minipc_socket"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: switch.my_multi_outlet_right
          domain: switch
          menu_script: script.send_system_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_bathroom_power"
    alias: "Telegram Bot Toggle Bathroom Power"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_bathroom_power"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: light.bathroom_main
          domain: light
          menu_script: script.send_system_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_silent_mode"
    alias: "Telegram Bot Toggle Silent Mode"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_silent_mode"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: input_boolean.silent_mode
          domain: input_boolean
          menu_script: script.send_system_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  - id: "telegram_bot_toggle_force_cctv_mode"
    alias: "Telegram Bot Toggle Force CCTV Off Mode"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/toggle_force_cctv_mode"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: script.toggle_device
        data:
          entity: input_boolean.force_camera_off
          domain: input_boolean
          menu_script: script.send_system_status
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
          user_id: "{{ trigger.event.data.user_id }}"

  # Подтверждение перезагрузки системы
  - id: "telegram_bot_confirm_reboot"
    alias: "Telegram Bot Confirm Reboot"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/confirm_reboot"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.send_message
        data:
          target: "{{ trigger.event.data.chat_id }}"
          parse_mode: html
          message: "<b>⚠️ Подтвердите перезагрузку системы!</b>"
          inline_keyboard: >
            {{ [
                [ ["✅ Подтвердить", "/force_reboot"] ],
                [ ["❌ Отмена", "/system_control"] ]
              ] | tojson }}
      - service: system_log.write
        data:
          message: "Запрос на подтверждение reboot (user: {{ trigger.event.data.user_id }})"
          level: warning

  # Принудительная перезагрузка системы (после подтверждения)
  - id: "telegram_bot_force_reboot"
    alias: "Telegram Bot Force Reboot"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/force_reboot"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.send_message
        data:
          target: "{{ trigger.event.data.chat_id }}"
          parse_mode: html
          message: "<b>⚠️ Система будет перезагружена через 5 секунд!</b>"
      - delay:
          seconds: 5
      - service: homeassistant.restart
      - service: system_log.write
        data:
          message: "Система перезагружена через Telegram (user: {{ trigger.event.data.user_id }})"
          level: warning

  ##############################################################################
  # Управление системой виртуализации Proxmox
  ##############################################################################
  # Обработчик команды обновления статуса PVE
  - id: "telegram_bot_pve_status_refresh"
    alias: "Telegram Bot PVE Status Refresh"
    initial_state: true
    triggers:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/pve_status_refresh"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: telegram_bot.delete_message
        data:
          message_id: "{{ trigger.event.data.message.message_id }}"
          chat_id: "{{ trigger.event.data.chat_id }}"
      - service: script.send_pve_status
        data:
          target: "{{ trigger.event.data.chat_id }}"

  # Управление системой виртуализации
  # === HAOS12 ===
  - id: "telegram_bot_reboot_haos12"
    alias: "Telegram Bot Reboot HAOS12"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/reboot_haos12"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.qemu_haos12_3_100_reboot
          chat_id: "{{ trigger.event.data.chat_id }}"

  # === MariaDB ===
  - id: "telegram_bot_start_mariadb"
    alias: "Telegram Bot Start LXC MariaDB"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/start_mariadb"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_mariadb_101_start
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_stop_mariadb"
    alias: "Telegram Bot Stop LXC MariaDB"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/stop_mariadb"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_mariadb_101_stop
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_reboot_mariadb"
    alias: "Telegram Bot Reboot LXC MariaDB"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/reboot_mariadb"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_mariadb_101_reboot
          chat_id: "{{ trigger.event.data.chat_id }}"

  # === Jackett ===
  - id: "telegram_bot_start_jackett"
    alias: "Telegram Bot Start LXC Jackett"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/start_jackett"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_jackett_102_start
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_stop_jackett"
    alias: "Telegram Bot Stop LXC Jackett"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/stop_jackett"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_jackett_102_stop
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_reboot_jackett"
    alias: "Telegram Bot Reboot LXC Jackett"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/reboot_jackett"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_jackett_102_reboot
          chat_id: "{{ trigger.event.data.chat_id }}"

  # === Jellyfin ===
  - id: "telegram_bot_start_jellyfin"
    alias: "Telegram Bot Start LXC Jellyfin"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/start_jellyfin"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_jellyfin_103_start
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_stop_jellyfin"
    alias: "Telegram Bot Stop LXC Jellyfin"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/stop_jellyfin"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_jellyfin_103_stop
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_reboot_jellyfin"
    alias: "Telegram Bot Reboot LXC Jellyfin"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/reboot_jellyfin"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_jellyfin_103_reboot
          chat_id: "{{ trigger.event.data.chat_id }}"

  # === Deluge ===
  - id: "telegram_bot_start_deluge"
    alias: "Telegram Bot Start LXC Deluge"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/start_deluge"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_deluge_104_start
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_stop_deluge"
    alias: "Telegram Bot Stop LXC Deluge"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/stop_deluge"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_deluge_104 # или button.lxc_deluge_104_stop
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_reboot_deluge"
    alias: "Telegram Bot Reboot LXC Deluge"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/reboot_deluge"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_deluge_104_reboot
          chat_id: "{{ trigger.event.data.chat_id }}"

  # === TorrServer ===
  - id: "telegram_bot_start_torrserver"
    alias: "Telegram Bot Start LXC TorrServer"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/start_torrserver"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_debian_105_start
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_stop_torrserver"
    alias: "Telegram Bot Stop LXC TorrServer"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/stop_torrserver"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_debian_105_stop
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_reboot_torrserver"
    alias: "Telegram Bot Reboot LXC TorrServer"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/reboot_torrserver"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_debian_105_reboot
          chat_id: "{{ trigger.event.data.chat_id }}"

  # === MinimServer ===
  - id: "telegram_bot_start_minimserver"
    alias: "Telegram Bot Start LXC MinimServer"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/start_minimserver"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_minim_107_start
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_stop_minimserver"
    alias: "Telegram Bot Stop LXC MinimServer"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/stop_minimserver"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_minim_107_stop
          chat_id: "{{ trigger.event.data.chat_id }}"

  - id: "telegram_bot_reboot_minimserver"
    alias: "Telegram Bot Reboot LXC MinimServer"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/reboot_minimserver"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - service: script.pve_action
        data:
          button: button.lxc_minim_107_reboot
          chat_id: "{{ trigger.event.data.chat_id }}"
