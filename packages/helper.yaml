################################################################################
# /packages/helper.yaml
################################################################################
#
# Этот пакет конфигураций Home Assistant обеспечивает вспомогательные функции
# для мониторинга и управления различными аспектами умного дома.
# Он включает в себя:
# 1) Различные сенсоры (SQL, шаблонные бинарные сенсоры) -- для контроля размера БД,
#    уровня CO2, состояния дверей и температурного порога.
# 2) Шаблонные сенсоры для хранения постоянных значений (например, «Норма давления»).
# 3) Input_boolean (булевые флаги), управляющие режимами/состояниями (фаза загрузки,
#    тихий режим, зимний режим, режим уборки и т.д.).
# 4) Группы (например, group.all_residents) для упрощенного слежения за тем,
#    кто дома.
# 5) Автоматизации, в числе которых:
#    • Включение/выключение зимнего режима по календарным месяцам.
#    • Управление «фазой загрузки» (system_startup_phase) при запуске/после запуска.
#    • Автоматический «тихий режим» (silent_mode) каждый вечер в 23:00 и его снятие в 09:00.
#    • Сброс уведомлений о CO2 по таймеру.
#    • Логирование изменений погоды.
#    • Сброс состояния уведомлений при изменении livingroom_ventilation_status.
#    • Сохранение/восстановление состояний климатической техники при остановке/старте HA.
#    • Выключение камеры при возвращении жильцов.
#    • Управление освещением, розеткой отпаривателя и ТВ в рабочие дни.
#    • Автоматическое отключение розетки отпаривателя при отсутствии жильцов.
#
################################################################################

##############################################################################
#                               СЕНСОРЫ
##############################################################################
#
# Данный раздел содержит различные сенсоры: как напрямую связанные с БД,
# так и шаблонные бинарные сенсоры для CO2, дверей и температуры.
#
# 1) sensor (SQL-платформа):
#    - Измеряет размер базы данных MariaDB, чтобы контролировать объем
#      занимаемого хранилища. Это полезно, если вы ведете журнал в
#      MariaDB и не хотите, чтобы размер БД рос бесконтрольно.
#
# 2) binary_sensor (template-платформа):
#    - doors_in_kitchen_livingroom: отмечает, открыты ли двери
#      на балкон (может использоваться для отключения приборов при
#      проветривании).
#    - temperature_below_20: бинарный датчик, который сигнализирует,
#      что температура в одной из комнат упала ниже 20°C, возможно,
#      требуется отопление или дополнительный обогрев.
#  3) someone_is_home: вычисляет, что хотя бы один жилец находится дома (используя группу all_residents).
#
##############################################################################

sensor:
  # --------------------------------------------------------------------------
  # Измерение размера БД MariaDB
  # --------------------------------------------------------------------------
  # SQL-сенсор, который выполняет запрос к таблице information_schema.tables
  # и вычисляет общий размер (данные + индексы) в мегабайтах для схемы "homeassistant".
  # Используется для наблюдения за разрастанием БД.
  - platform: sql
    db_url: !secret db_link
    queries:
      - name: Maria DB size
        query: >
          SELECT 
            table_schema AS "database", 
            ROUND(SUM(data_length + index_length) / 1048576, 2) AS "value" 
          FROM information_schema.tables 
          WHERE table_schema = "homeassistant" 
          GROUP BY table_schema;
        column: "value"
        unit_of_measurement: MB

##############################################################################
#                          БИНАРНЫЕ ДАТЧИКИ
##############################################################################

binary_sensor:
  # --------------------------------------------------------------------------
  # Датчики состояния
  # --------------------------------------------------------------------------
  # temperature_below_20:
  #   - 'on', если хотя бы в одной из перечисленных комнат
  #     температура ≤ 20°C.
  #   - 'off', иначе.
  - platform: template
    sensors:
      temperature_below_20:
        unique_id: temperature_below_20
        friendly_name: "Температура ниже 20 градусов"
        device_class: cold
        value_template: >
          {% set temp1 = states('sensor.temperatura_v_gostinnoi_sglazhennaia') %}
          {% set temp2 = states('sensor.temperatura_v_spalne_sglazhennaia') %}
          {% set temp3 = states('sensor.srednee_znachenie_temperatury_v_masterskoi_2') %}
          {{ (temp1 not in ['unknown','unavailable'] and temp1|float <= 20)
             or (temp2 not in ['unknown','unavailable'] and temp2|float <= 20)
             or (temp3 not in ['unknown','unavailable'] and temp3|float <= 20) }}

  # temperature_below_20:
  #   - 'on', если кто-то дома
  #   - 'off', иначе.

  - platform: template
    sensors:
      someone_is_home:
        friendly_name: "Кто-то дома"
        value_template: >
          {{ expand('group.all_residents') | selectattr('state', 'eq', 'home') | list | length > 0 }}

  - platform: template
    sensors:
      andrei_is_home:
        friendly_name: "Andrei -- дома"
        device_class: occupancy
        value_template: >
          {{ is_state('person.master', 'home') 
             or is_state('sensor.pixel_8_pro_wi_fi_connection', 'mdhouse') }}

##############################################################################
#                           ШАБЛОННЫЕ СЕНСОРЫ
##############################################################################
#
# Блок template-сенсоров, которые могут быть использованы для вычисления
# или хранения постоянных (фиксированных) значений, недоступных в виде отдельных
# физических датчиков. В этом случае задан «Норма атмосферного давления» --
# постоянное значение, которое можно, например, сравнивать с реальным
# давлением, получаемым от другого датчика.
#
# Вы можете использовать этот сенсор в автоматизациях или в карточках Lovelace,
# если хотите проверить отклонение текущего давления от «нормы», а также
# отображать его в интерфейсе.
#
##############################################################################

template:
  - sensor:
      - name: "Норма атмосферного давления"
        unique_id: fixed_pressure_value
        unit_of_measurement: "mmHg"
        # Фиксированное значение давления (739 мм рт. ст.),
        # установленное в качестве эталонной "нормы".
        # При необходимости можно изменить на любое подходящее значение.
        state: "739"

##############################################################################
#  ВХОДНЫЕ ПАРАМЕТРЫ
#  Входные переменные сохраняются между перезагрузками системы
##############################################################################
#  ВХОДНЫЕ БУЛЕВЫ (INPUT_BOOLEAN)
#############################################################################
#
# Блок булевых сенсоров, которые служат для переключения и учета различных
# состояний и режимов в системе Home Assistant. Это могут быть как технические
# (при загрузке системы, при необходимости выключить уведомления), так и
# пользовательские режимы (режим тишины, зимний режим и т.д.).
#
# Использование input_boolean упрощает логику автоматизаций, делая её более
# наглядной и гибкой. Ниже описано каждое поле, его назначение и начальное
# значение (initial).
#
##############################################################################

input_boolean:
  # --------------------------------------------------------------------------
  # 1) Фаза загрузки системы
  # --------------------------------------------------------------------------
  # Активируется при старте Home Assistant, указывая, что система в процессе
  # загрузки (например, чтобы временно приостановить срабатывание некоторых
  # автоматизаций). Позже автоматически отключается.
  system_startup_phase:
    name: "Фаза загрузки системы"
    initial: on
    icon: mdi:timer-sand

  # --------------------------------------------------------------------------
  # 2) Режим тишины
  # --------------------------------------------------------------------------
  # Используется, чтобы переключать «тихий режим» в определенные часы суток
  # (23:00--09:00 по умолчанию). В этом режиме система блокирует громкие
  # уведомления или отключает/уменьшает громкость оповещений.
  #
  # Если пользователь вручную включает silent_mode в другое время,
  # автоматизация все равно переключит его в off в 09:00 на следующий день,
  # обеспечивая гарантированный выход из режима тишины.
  silent_mode:
    name: "Режим тишины"
    initial: off
    icon: mdi:emoticon-neutral-outline

  # --------------------------------------------------------------------------
  # 3) Зимний режим
  # --------------------------------------------------------------------------
  # Активирует особые сценарии/автоматизации для зимних месяцев.
  # Например, может поддерживать более высокий уровень обогрева
  # или запускать другие специфичные для зимы процессы.
  winter_mode:
    name: "Зимний режим"
    initial: off
    icon: mdi:snowflake

  # --------------------------------------------------------------------------
  # 4) Режим уборки в ванной
  # --------------------------------------------------------------------------
  # Может использоваться для автоматизаций, связанных с уборкой:
  # включение вытяжки, освещения или других устройств в ванной
  # в «режиме уборки», чтобы удобно и безопасно заниматься чисткой/мойкой.
  bathroom_cleaning_mode:
    name: "Режим уборки в ванной"
    initial: off
    icon: mdi:broom

  # --------------------------------------------------------------------------
  # 5) Уведомление о замене фильтра отправлено
  # --------------------------------------------------------------------------
  # Флаг, показывающий, что пользователю уже было отправлено уведомление
  # о необходимости замены фильтра (например, в очистителе воздуха).
  # Используется, чтобы не присылать повторные уведомления.
  filter_replace_notified:
    name: "Уведомление о замене фильтра отправлено"
    initial: off
    icon: mdi:filter-outline

  # --------------------------------------------------------------------------
  # 6) Сенсор текстовых уведомлений о СО2
  # --------------------------------------------------------------------------
  # Активируется, если было отправлено текстовое уведомление о повышенном
  # уровне CO2. Автоматизации могут затем сбрасывать этот флаг по таймеру
  # или при смене условий.
  co2_text_notification_sensor:
    name: "Сенсор текстовых уведомлений о СО2"
    initial: false
    icon: mdi:message-alert

  # --------------------------------------------------------------------------
  # 7) Сенсор голосовых уведомлений о СО2
  # --------------------------------------------------------------------------
  # Аналогично предыдущему, но для голосовых уведомлений
  # (например, через TTS-модуль).
  co2_voice_notification_sensor:
    name: "Сенсор голосовых уведомлений о СО2"
    initial: false
    icon: mdi:account-voice

  # --------------------------------------------------------------------------
  # 9) Climate Pre-Restart State
  # --------------------------------------------------------------------------
  # Технический флаг, запоминающий состояние климатической системы
  # (например, кондиционера) перед перезагрузкой Home Assistant.
  # После рестарта используется для восстановления прежнего состояния.
  climate_pre_restart_state:
    name: "Climate Pre-Restart State"
    initial: off

  # --------------------------------------------------------------------------
  # 10) Fan Pre-Restart State
  # --------------------------------------------------------------------------
  # Аналогично предыдущему пункту, но для вентилятора/очистителя воздуха.
  # Запоминает состояние устройства.
  fan_pre_restart_state:
    name: "Fan Pre-Restart State"
    initial: off

  # --------------------------------------------------------------------------
  # 11) Humidifier Pre-Restart State
  # --------------------------------------------------------------------------
  # Аналогично предыдущим пунктам (9, 10), но для увлажнителя.
  humidifier_pre_restart_state:
    name: "Humidifier Pre-Restart State"
    initial: off

  # --------------------------------------------------------------------------
  # 12) Climate Pre-State When Door Opened
  # --------------------------------------------------------------------------
  # Запоминает состояние климатической системы при открытии двери
  # (например, при проветривании). Может использоваться, чтобы автоматически
  # вернуть систему в исходный режим, когда дверь закрывается.
  door_open_climate_pre_state:
    name: "Climate Pre-State When Door Opened"
    initial: off

  # --------------------------------------------------------------------------
  # 13) Fan Pre-State When Door Opened
  # --------------------------------------------------------------------------
  # Аналогично предыдущему пункту (12), но для вентилятора.
  door_open_fan_pre_state:
    name: "Fan Pre-State When Door Opened"
    initial: off

  # --------------------------------------------------------------------------
  # 14) Humidifier Pre-State When Door Opened
  # --------------------------------------------------------------------------
  # Аналогично предыдущим пунктам. Запоминает состояние увлажнителя.
  door_open_humidifier_pre_state:
    name: "Humidifier Pre-State When Door Opened"
    initial: off
  # --------------------------------------------------------------------------
  # 15) Force Camera Off
  # --------------------------------------------------------------------------
  # Переключатель форсированного режима отключения камер
  force_camera_off:
    name: "Форсированное отключение камер"
    initial: off
    icon: mdi:cctv-off
  # --------------------------------------------------------------------------
  # 16) Защита освещения ванной при запуске
  # --------------------------------------------------------------------------
  # Защита освещения ванной при запуске
  bathroom_lights_startup_protection:
    name: "Защита освещения ванной при запуске"
    initial: on
    icon: mdi:shield-home

##############################################################################
#  ВХОДНЫЕ БУЛЕВЫ (INPUT_BOOLEAN)
#############################################################################
input_text:
  # ----------------------------------------------------------------------------
  # Текстовое поле, которое в автоматизации "Обновление списка пользователей,
  # находящихся дома" хранит список имен тех, кто фактически находится дома.
  # ----------------------------------------------------------------------------
  currently_home:
    name: "Currently Home"
    min: 0
    max: 255

input_number:
  low_th_notification_reset_period:
    name: "Период сброса уведомлений о низкой температуре"
    min: 5
    max: 60
    step: 1
    initial: 20

##############################################################################
#                                 ГРУППЫ
##############################################################################
#
# Группировка сущностей для удобного контроля присутствия пользователей.
# group.all_residents указывает, что «дом» считается занятым,
# если хотя бы один человек (master или tatiana) находится дома.
#
##############################################################################

group:
  all_residents:
    name: "Все Жильцы"
    entities:
      - person.master
  #      - person.tatiana

  # ----------------------------------------------------------------------------
  # Группа камер
  # ----------------------------------------------------------------------------
  cameras:
    name: "Камеры"
    entities:
      - switch.chuangmi_cn_309825146_ipc019_on_p_2_1
      - switch.chuangmi_cn_311366982_ipc019_on_p_2_1

  # ----------------------------------------------------------------------------
  # Группа телевизоров в гостиной
  # ----------------------------------------------------------------------------
  living_room_tv:
    name: "Телевизоры в гостиной"
    entities:
      - media_player.televizor_v_gostinoi
      - media_player.televizor_v_gostinoi_2
      - media_player.android_tv_192_168_100_171
      - media_player.samsung_q70_series_55

##############################################################################
#                             АВТОМАТИЗАЦИИ
##############################################################################
#
# Ниже собраны автоматизации, упрощающие управление системой:
# • Обновление списка пользователей, находящихся дома.
# • Переключение зимнего режима по месяцам.
# • Управление фазой загрузки системы (включение/отключение).
# • Автоматический режим тишины (включение в 23:00, снятие в 09:00).
# • Сброс уведомлений о CO2 при завершении проветривания.
# • Сохранение/восстановление состояний климатических приборов при выключении/старте HA.
# • Управление камерами в зависимости от присутствия.
# • Очистка базы данных MariaDB.
# • Дополнительные автоматизации для управления освещением, розеткой отпаривателя
#   и ТВ в рабочие дни, а также автономное отключение отпаривателя при отсутствии дома.
#
##############################################################################

automation:
  # ----------------------------------------------------------------------------
  # Обновление списка пользователей, находящихся дома
  # ----------------------------------------------------------------------------
  # Срабатывает при изменении состояния пользователей или их устройств
  # (например, смена Wi-Fi-сети или статуса присутствия).
  # При срабатывании записывает всех «домашних» в input_text.currently_home.

  - id: "c6382818-05ed-4590-be92-b367489fb0e1"
    alias: "HELPER: Обновление списка пользователей, находящихся дома"
    triggers:
      - platform: state
        entity_id:
          - binary_sensor.andrei_is_home
          - person.master
    actions:
      - service: input_text.set_value
        target:
          entity_id: input_text.currently_home
        data:
          value: >
            {% set home_users = [] %}
            {% if is_state('binary_sensor.andrei_is_home', 'on') %}
              {% set home_users = home_users + ['Andrei'] %}
            {% endif %}
            {{ home_users | join(', ') }}

  # --------------------------------------------------------------------------
  # АВТОМАТИЧЕСКОЕ ВКЛЮЧЕНИЕ/ВЫКЛЮЧЕНИЕ ЗИМНЕГО РЕЖИМА НА ОСНОВЕ МЕСЯЦА
  # --------------------------------------------------------------------------
  - id: "d8084e61-405b-4f92-8c86-527254cc6753"
    alias: "HELPER:Переключение зимнего режима по месяцам"
    description: >
      Автоматизация, которая ежедневно проверяет, нужно ли включить
      или выключить зимний режим в зависимости от текущего месяца.
      Считаем «зимой» период с ноября (11) по март (3).
      Если время года подходит под зимний период, включаем boolean.winter_mode,
      иначе -- выключаем.
    mode: single
    triggers:
      - platform: time
        at: "00:01:00"
      - platform: homeassistant
        event: start
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ now().month >= 11 or now().month <= 3 }}
            sequence:
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.winter_mode
        default:
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.winter_mode

  # --------------------------------------------------------------------------
  # Включение датчика фазы загрузки системы после старта
  # --------------------------------------------------------------------------
  - id: "38ea50fb-09bc-4d39-a771-1727ab72f265"
    alias: "HELPER: Фаза: Включение датчика загрузки"
    description: "Активируем system_startup_phase при старте Home Assistant"
    mode: single
    triggers:
      - platform: homeassistant
        event: start
    actions:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.system_startup_phase

  # --------------------------------------------------------------------------
  # Отключение датчика фазы загрузки через 2 минуты после старта
  # --------------------------------------------------------------------------
  - id: "03e3ffd0-4e1e-4200-b0e3-1ce6a2d77d6a"
    alias: "HELPER: Фаза: Отключение датчика загрузки (2 минуты)"
    description: "Выключаем input_boolean.system_startup_phase спустя 2 минуты после старта"
    mode: single
    triggers:
      - platform: homeassistant
        event: start
    actions:
      - delay: "00:02:00"
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.system_startup_phase

  # --------------------------------------------------------------------------
  # Режим тишины (c 23:00 до 09:00)
  # --------------------------------------------------------------------------
  - id: "cc269239-a6dd-422f-ba2a-3d57e4c5981e"
    alias: "HELPER: Установка режима тишины (23:00)"
    mode: single
    triggers:
      - platform: time
        at: "23:00:00"
    actions:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.silent_mode

  - id: "6ed14663-ebe5-4ab3-bc3b-43e682c45f3b"
    alias: "HELPER: Снятие режима тишины (09:00)"
    mode: single
    triggers:
      - platform: time
        at: "09:00:00"
    actions:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.silent_mode

  # --------------------------------------------------------------------------
  # Сброс boolean-сенсоров при завершении проветривания (livingroom_ventilation_status)
  # --------------------------------------------------------------------------
  - id: "7df1e59a-af5d-4496-be72-e687afdbf08e"
    alias: "HELPER: Обновление сенсора контроля уведомлений о уровне CO2"
    mode: single
    triggers:
      - platform: state
        entity_id: binary_sensor.livingroom_ventilation_status
        from: "on"
        to: "off"
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    actions:
      - service: input_boolean.turn_off
        target:
          entity_id:
            - input_boolean.co2_voice_notification_sensor
            - input_boolean.co2_text_notification_sensor

  # --------------------------------------------------------------------------
  # Сохранение состояний климатической техники при завершении работы HA
  # --------------------------------------------------------------------------
  - id: "5b187cde-0ad5-4132-bb68-a622dd15d6ff"
    alias: "HELPER: Сохранение состояний климатической техники"
    mode: single
    triggers:
      - platform: homeassistant
        event: shutdown
    actions:
      - choose:
          - conditions:
              - condition: state
                entity_id: climate.konditsioner
                state: "on"
              - condition: state
                entity_id: input_boolean.winter_mode
                state: "off"
            sequence:
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.climate_pre_restart_state
        default:
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.climate_pre_restart_state

      - choose:
          - conditions:
              - condition: state
                entity_id: switch.zhimi_mb3_a5d3_switch_status
                state: "on"
            sequence:
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.fan_pre_restart_state
        default:
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.fan_pre_restart_state

      - choose:
          - conditions:
              - condition: state
                entity_id: switch.evolution_hf_878
                state: "on"
            sequence:
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.humidifier_pre_restart_state
        default:
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.humidifier_pre_restart_state

  # --------------------------------------------------------------------------
  # Восстановление состояний климатической техники при старте HA
  # --------------------------------------------------------------------------
  - id: "457a6711-67fa-4cb2-bcab-63c0cc58e054"
    alias: "HELPER: Восстановление состояний климатической техники"
    mode: single
    triggers:
      - platform: homeassistant
        event: start
    actions:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.climate_pre_restart_state
                state: "on"
              - condition: state
                entity_id: input_boolean.winter_mode
                state: "off"
            sequence:
              - service: climate.turn_on
                target:
                  entity_id: climate.konditsioner
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.fan_pre_restart_state
                state: "on"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: switch.zhimi_mb3_a5d3_switch_status
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.humidifier_pre_restart_state
                state: "on"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: switch.evolution_hf_878
      - service: input_boolean.turn_off
        target:
          entity_id:
            - input_boolean.climate_pre_restart_state
            - input_boolean.fan_pre_restart_state
            - input_boolean.humidifier_pre_restart_state

  # ----------------------------------------------------------------------------
  # Управление камерами в зависимости от присутствия
  # ----------------------------------------------------------------------------
  - id: "bee019e8-c011-4283-85df-4cbbbc00e92f"
    alias: "Камеры: Управление в зависимости от присутствия"
    description: "Включение/выключение камер в зависимости от того, кто дома, но с учетом режима форсированного отключения."
    mode: single
    triggers:
      - platform: state
        entity_id: binary_sensor.someone_is_home
    conditions:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
      - condition: state
        entity_id: input_boolean.force_camera_off
        state: "off"
    actions:
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.someone_is_home
                state: "off"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: group.cameras
              - service: notify.master
                data:
                  message: "Камеры включены: Никого нет дома."

          - conditions:
              - condition: state
                entity_id: binary_sensor.someone_is_home
                state: "on"
            sequence:
              - service: switch.turn_off
                target:
                  entity_id: group.cameras
              - service: notify.master
                data:
                  message: "Камеры выключены: Кто-то дома."

  # --------------------------------------------------------------------------
  # Автоматизация: Блокировка включения камер при форсированном отключении
  # --------------------------------------------------------------------------
  - id: "98df0b92-1c60-4e48-a065-3412a0706124"
    alias: "Камеры: Блокировка включения при форсированном отключении"
    description: >
      Эта автоматизация предназначена для предотвращения включения камер,
      когда активирован режим принудительного отключения (force_camera_off).
      Если один из переключателей камер переходит в состояние "on" при активном режиме,
      автоматизация немедленно отключает его и отправляет уведомление пользователю.
    mode: parallel
    triggers:
      - platform: state
        entity_id:
          - switch.chuangmi_cn_309825146_ipc019_on_p_2_1
          - switch.chuangmi_cn_311366982_ipc019_on_p_2_1
        to: "on"
    conditions:
      - condition: state
        entity_id: input_boolean.force_camera_off
        state: "on"
    actions:
      - service: switch.turn_off
        target:
          entity_id:
            - switch.chuangmi_cn_309825146_ipc019_on_p_2_1
            - switch.chuangmi_cn_311366982_ipc019_on_p_2_1
      - service: notify.master
        data:
          message: "Попытка включения камер заблокирована (форсированное отключение)."

  # --------------------------------------------------------------------------
  # Автоматизация: Очистка базы данных MariaDB в 03:00
  # --------------------------------------------------------------------------
  - id: "779498b6-e63f-454d-8866-8e7e7a94d8e4"
    alias: "MariaDB: Очистка базы в 3:00"
    description: >
      Автоматизация запускается ежедневно в 03:00 и выполняет очистку базы данных
      с использованием сервиса recorder.purge, оставляя данные за последние 90 дней.
      Это помогает предотвратить бесконтрольное разрастание БД.
    mode: single
    trigger:
      - platform: time
        at: "03:40:00"
    action:
      - service: recorder.purge
        data:
          keep_days: 90
          repack: false # для MariaDB не нужен; true только для SQLite
          apply_to_entities: [] # пусто = ко всем
  ##############################################################################
  # Выключение света, отпаривателя и ТВ в рабочие дни
  ##############################################################################
  - id: "8a46561c-f48f-4c93-b53e-d1af940fdb6d"
    alias: "Рабочие дни: Выключение света, отпаривателя и ТВ (09:00-17:00)"
    description: >
      В рабочие дни (ПН-ПТ) в период с 09:00 до 17:00, если режим уборки выключен
      и никого нет дома, отключаются все освещение, розетка отпаривателя и ТВ.
    mode: single
    triggers:
      - platform: state
        entity_id: binary_sensor.someone_is_home
        to: "off"
      - platform: time
        at: "09:00:00"
    conditions:
      # Ограничение по дням недели
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
      # Ограничение по времени суток (между 09:00 и 17:00)
      - condition: time
        after: "09:00:00"
        before: "17:00:00"
      # Режим уборки должен быть выключен
      - condition: state
        entity_id: input_boolean.bathroom_cleaning_mode
        state: "off"
      # Проверка, что никого нет дома
      - condition: state
        entity_id: binary_sensor.someone_is_home
        state: "off"
    actions:
      - service: homeassistant.turn_off
        target:
          entity_id: light.all_lights
      - service: switch.turn_off
        target:
          entity_id: switch.smart_plug_in_unit_vykliuchatel
      - service: homeassistant.turn_off
        target:
          entity_id: group.living_room_tv

  ################################################################################
  # Отключение отпаривателя при отсутствии дома
  ################################################################################
  - id: "ee320693-2e76-435b-8012-3a908046d4d5e"
    alias: "Выключение отпаривателя при отсутствии дома"
    description: >
      Автоматизация отключает розетку отпаривателя (switch.smart_plug_in_unit_vykliuchatel),
      если датчик присутствия (binary_sensor.someone_is_home) фиксирует, что никого нет дома.
    mode: single
    triggers:
      - platform: state
        entity_id: binary_sensor.someone_is_home
        to: "off"
    conditions:
      - condition: state
        entity_id: binary_sensor.someone_is_home
        state: "off"
    actions:
      - service: switch.turn_off
        target:
          entity_id: switch.smart_plug_in_unit_vykliuchatel
