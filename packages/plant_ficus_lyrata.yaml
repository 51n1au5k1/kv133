# /packages/plant_ficus_lyrata.yaml #
#####################################

# Этот пакет конфигураций Home Assistant предназначен для мониторинга условий
# содержания растения Фикус лировидный (Ficus lyrata) и включает в себя механизмы
# уведомлений о необходимости ухода.

# Конфигурации
# Входные Тексты и Даты

input_text:
  notification_history_ficus_lyrata:
    name: "Фикус лировидный: История уведомлений"

input_datetime:
  last_ficus_lyrata_soil_notification:
    name: "Last Ficus lyrata Soil Notification Time"
    has_date: true
    has_time: true
    initial: 1970-01-01 00:00:00
  last_ficus_lyrata_temperature_notification:
    name: "Last Ficus lyrata Temperature Notification Time"
    has_date: true
    has_time: true
    initial: 1970-01-01 00:00:00

# Сенсоры усредненных значений для устранения ложных срабатываний
sensor:
  - platform: filter
    name: "ficus_lyrata_filtered_temperature"
    entity_id: sensor.ficus_lyrata_temperature
    filters:
      - filter: time_simple_moving_average
        window_size: "01:00"
        precision: 2
  - platform: filter
    name: "ficus_lyrata_filtered_air_humidity"
    entity_id: sensor.ficus_lyrata_air_humidity
    filters:
      - filter: time_simple_moving_average
        window_size: "01:00"
        precision: 2
  - platform: filter
    name: "ficus_lyrata_filtered_soil_moisture"
    entity_id: sensor.ficus_lyrata_soil_moisture
    filters:
      - filter: time_simple_moving_average
        window_size: "01:00"
        precision: 2

# Бинарные датчики для мониторинга условий содержания растения
binary_sensor:
  - platform: template
    sensors:
      plant_alert_ficus_lyrata_soil:
        unique_id: plant_alert_ficus_lyrata_soil
        friendly_name: "Необходимость полива (Фикус лировидный)"
        device_class: problem
        value_template: >-
          {% set moisture = states('sensor.ficus_lyrata_filtered_soil_moisture') | float(default=0) %}
          {% set min_threshold = states('number.ficus_lyrata_min_soil_moisture') | float(default=0) %}
          {{ moisture > 0 and moisture < min_threshold }}
      plant_alert_ficus_lyrata_temperature:
        unique_id: plant_alert_ficus_lyrata_temperature
        friendly_name: "Необходимость согрева или охлаждения (Фикус лировидный)"
        device_class: problem
        value_template: >-
          {% set temperature = states('sensor.ficus_lyrata_filtered_temperature') | float(default=0) %}
          {% set min_threshold = states('number.ficus_lyrata_min_temperature') | float(default=0) %}
          {% set max_threshold = states('number.ficus_lyrata_max_temperature') | float(default=0) %}
          {{ (temperature > 0 and temperature < min_threshold) or (temperature > max_threshold) }}
      ficus_lyrata_watering_needed_recently:
        unique_id: ficus_lyrata_watering_needed_recently
        friendly_name: "Фикус лировидный: Недавняя необходимость полива"
        value_template: >-
          {% set last_notification = states('input_datetime.last_ficus_lyrata_soil_notification') %}
          {% set last_notification_ts = as_timestamp(last_notification) if last_notification not in ['unknown', 'unavailable', 'none'] else 0 %}
          {{ is_state('binary_sensor.plant_alert_ficus_lyrata_soil', 'on') and (as_timestamp(now()) - last_notification_ts) > 10800 }}
        delay_off:
          minutes: 1

# Таймер для сброса тревоги о поливе

timer:
  ficus_lyrata_watering_alert:
    duration: "01:00:00"

# Скрипты для автоматизаций-уведомлений

script:
  ficus_lyrata_notify:
    description: "Отправляет уведомление о состоянии Фикус лировидный."
    fields:
      type:
        description: "Тип уведомления (watering/temperature)."
        example: "watering"
      value:
        description: "Значение сенсора, влияющего на уведомление."
        example: "30"
    sequence:
      - service: notify.master
        data:
          message: >-
            {% if type == 'watering' %}
              Необходимо полить Фикус лировидный: влажность почвы {{ value }}%.
            {% elif type == 'temperature' %}
              Фикус лировидный необходимо поставить в тёплое место, температура почвы {{ value }}°C.
            {% endif %}
      - service: notify.tatiana
        data:
          message: >-
            {% if type == 'watering' %}
              Необходимо полить Фикус лировидный: влажность почвы {{ value }}%.
            {% elif type == 'temperature' %}
              Фикус лировидный необходимо поставить в тёплое место, температура почвы {{ value }}°C.
            {% endif %}

# Автоматизации

automation:
  - id: "757f306a-fb27-4164-844a-5e236e04719d"
    alias: "Фикус лировидный: Сброс тревоги о поливе"
    mode: restart
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.ficus_lyrata_watering_alert
    action:
      - service: homeassistant.turn_off
        entity_id: binary_sensor.plant_alert_ficus_lyrata_soil

  - id: "3ee8085c-621a-49f0-98f6-cce0d5c3c49b"
    alias: "Растение. Фикус лировидный: Уведомление о поливе"
    trigger:
      - platform: state
        entity_id: binary_sensor.plant_alert_ficus_lyrata_soil
        to: "on"
    condition:
      - condition: template
        value_template: >-
          {% set last_notification = states('input_datetime.last_ficus_lyrata_soil_notification') %}
          {% set last_notification_ts = as_timestamp(last_notification) if last_notification not in ['unknown', 'unavailable', 'none'] else 0 %}
          {{ (as_timestamp(now()) - last_notification_ts) > 10800 }}
    action:
      - service: script.ficus_lyrata_notify
        data:
          type: "watering"
          value: "{{ states('sensor.ficus_lyrata_filtered_soil_moisture') }}"
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_ficus_lyrata_soil_notification
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - service: timer.start
        entity_id: timer.ficus_lyrata_watering_alert

  - id: "3ee8085c-621a-49f0-98f6-cce0d5c3c49c"
    alias: "Растение. Фикус лировидный: Уведомление о температуре"
    trigger:
      - platform: state
        entity_id: binary_sensor.plant_alert_ficus_lyrata_temperature
        to: "on"
    condition:
      - condition: template
        value_template: >-
          {% set last_notification = states('input_datetime.last_ficus_lyrata_temperature_notification') %}
          {% set last_notification_ts = as_timestamp(last_notification) if last_notification not in ['unknown', 'unavailable', 'none'] else 0 %}
          {{ (as_timestamp(now()) - last_notification_ts) > 10800 }}
    action:
      - service: script.ficus_lyrata_notify
        data:
          type: "temperature"
          value: "{{ states('sensor.ficus_lyrata_filtered_temperature') }}"
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_ficus_lyrata_temperature_notification
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
