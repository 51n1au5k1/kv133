################################################################################
# /packages/variables.yaml
################################################################################
#
# Назначение:
#   В данном пакете собраны переменные (input_number) и вычисляемые сенсоры
#   (template), используемые в различных частях системы умного дома.
#   Например, здесь определяются:
#   1) Лимиты для управляющей логики вытяжки на кухне (kitchen_fan_temp_limit,
#      kitchen_fan_hum_limit);
#   2) Шаблонные сенсоры для вычисления усредненной температуры/влажности
#      в гостиной (livingroom_average_temperature/humidity);
#   3) Начальные значения для температуры/влажности кухни (kitchen_fan_temp_initial,
#      kitchen_fan_hum_initial), которые зависят от гостиной + некоторой дельты;
#   4) Погодные переводы (направления ветра, погода) как для OpenWeather
#      (open_meteo_*) так и для Яндекс (yandex_weather4notion_*).
#
################################################################################

##############################################################################
#                               INPUT_NUMBER
##############################################################################
#
# Лимитные значения (порог температуры и влажности) для вытяжки на кухне.
# В автоматизациях можно сравнивать фактические показатели:
#   sensor.kitchen_th_temperature / sensor.kitchen_th_humidity
# c установленными kitchen_fan_temp_limit или kitchen_fan_hum_limit,
# чтобы принять решение, когда включать/выключать вытяжку.
#
##############################################################################
input_number:
  kitchen_fan_temp_limit:
    name: "Кухня: Лимит температуры для вытяжки"
    min: 0
    max: 50
    step: 0.1
    unit_of_measurement: "°C"
    initial: 25 # Начальное значение; можно поменять

  kitchen_fan_hum_limit:
    name: "Кухня: Лимит влажности для вытяжки"
    min: 0
    max: 100
    step: 1
    unit_of_measurement: "%"
    initial: 60 # Начальное значение; можно подкорректировать

  pressure_correction_value:
    name: "Поправка давления (мм рт.ст.)"
    min: 0
    max: 20
    step: 0.5
    unit_of_measurement: "мм рт.ст."
    initial: 6 # Начальное значение
##############################################################################
#                             TEMPLATE SENSORS
##############################################################################
#
#  1) kitchen_fan_temp_initial / kitchen_fan_hum_initial
#     - Предлагаемые «стартовые» значения температурного и влажностного порога
#       (добавляют +5°C/+10% к усреднённым данным гостиной).
#       Могут использоваться для инициализации input_number или другой логики.
#
#  2) livingroom_average_temperature / livingroom_average_humidity
#     - Усреднённая температура/влажность в гостиной. Берутся два сенсора
#       (livingroom_climat_sensor_..., co2_monitor_...) и вычисляется среднее.
#       Значения округляются до десятых. Если сенсоры недоступны, подставляются
#       дефолты (20°C, 50%).
#
#  3) open_meteo_weather4notion_wind / open_meteo_opisanie_na_russkom
#     - Перевод wind_bearing и состояния погоды из weather.kvartira_133
#       в удобное отображение по-русски.
#       «north», «east», «rainy» и т.д. → «северный», «дождливо» и т.п.
#
#  4) yandex_weather4notion_wind / yandex_weather4notion_conditions
#     - Аналогично, но для Яндекс погоды.
#
##############################################################################

sensor:
  # ==================================================================
  # 1) Температура/влажность стартового значения для вытяжки на кухне
  # ==================================================================
  - platform: template
    sensors:
      # 1.1) Начальное значение температуры (кухня)
      kitchen_fan_temp_initial:
        unique_id: "kitchen_fan_temp_initial" # Уникальный ID
        friendly_name: "Кухня: Начальное значение температуры для вытяжки"
        unit_of_measurement: "°C"
        icon_template: "mdi:thermometer" # Иконка термометра
        value_template: >
          {{ states('sensor.livingroom_average_temperature') | float(default=20) + 5 }}

      # 1.2) Начальное значение влажности (кухня)
      kitchen_fan_hum_initial:
        unique_id: "kitchen_fan_hum_initial"
        friendly_name: "Кухня: Начальное значение влажности для вытяжки"
        unit_of_measurement: "%"
        icon_template: "mdi:water-percent" # Иконка процента воды
        value_template: >
          {{ states('sensor.livingroom_average_humidity') | float(default=50) + 10 }}

      # ================================================================
      # 2.1) Усреднённая температура в гостиной
      # ================================================================
      livingroom_average_temperature:
        unique_id: "livingroom_average_temperature"
        friendly_name: "Living Room Average Temperature"
        unit_of_measurement: "°C"
        icon_template: "mdi:thermometer" # Иконка термометра
        value_template: >-
          {% set temp1 = states('sensor.livingroom_climat_sensor_temperature') | float(0) %}
          {% set temp2 = states('sensor.co2_monitor_temperature') | float(0) %}
          {% if temp1 is not none and temp2 is not none %}
            {{ ((temp1 + temp2) / 2) | round(1) }}
          {% else %}
            20.0
          {% endif %}

      # ================================================================
      # 2.2) Усреднённая влажность в гостиной
      # ================================================================
      livingroom_average_humidity:
        unique_id: "livingroom_average_humidity"
        friendly_name: "Living Room Average Humidity"
        unit_of_measurement: "%"
        icon_template: "mdi:water-percent" # Иконка процента воды
        value_template: >-
          {% set hum1 = states('sensor.livingroom_climat_sensor_humidity') | float(0) %}
          {% set hum2 = states('sensor.co2_monitor_humidity') | float(0) %}
          {% if hum1 is not none and hum2 is not none %}
            {{ ((hum1 + hum2) / 2) | round(1) }}
          {% else %}
            50.0
          {% endif %}

      # ================================================================
      # 3) Перевод состояний погоды OpenWeather (weather.kvartira_133)
      # ================================================================
      open_meteo_weather4notion_wind:
        friendly_name: "Направление ветра (OpenWeather)"
        value_template: >-
          {% set bearing = state_attr('weather.kvartira_133', 'wind_bearing') | float %}
          {% if 337.5 <= bearing < 360 or 0 <= bearing < 22.5 %}
            северный
          {% elif 22.5 <= bearing < 67.5 %}
            северо-восточный
          {% elif 67.5 <= bearing < 112.5 %}
            восточный
          {% elif 112.5 <= bearing < 157.5 %}
            юго-восточный
          {% elif 157.5 <= bearing < 202.5 %}
            южный
          {% elif 202.5 <= bearing < 247.5 %}
            юго-западный
          {% elif 247.5 <= bearing < 292.5 %}
            западный
          {% elif 292.5 <= bearing < 337.5 %}
            северо-западный
          {% else %}
            Направление ветра не определено
          {% endif %}

      open_meteo_opisanie_na_russkom:
        friendly_name: "Погодные условия (OpenWeather, рус.)"
        value_template: >-
          {% set condition = states('weather.kvartira_133') %}
          {% if condition == 'sunny' %}
            ясно
          {% elif condition == 'partlycloudy' %}
            малооблачно
          {% elif condition == 'cloudy' %}
            облачно с прояснениями
          {% elif condition == 'overcast' %}
            пасмурно
          {% elif condition == 'fog' %}
            туман
          {% elif condition == 'drizzle' %}
            морось
          {% elif condition == 'rainy' %}
            дождливо
          {% elif condition == 'light-rain' %}
            небольшой дождь
          {% elif condition == 'rain' %}
            дождь
          {% elif condition == 'pouring' %}
            ливень
          {% elif condition == 'snowy' %}
            снег
          {% elif condition == 'snowy-heavy' %}
            сильный снег
          {% elif condition == 'sleet' %}
            дождь со снегом
          {% elif condition == 'lightning' %}
            гроза
          {% else %}
            неопределенные погодные условия
          {% endif %}

  # ================================================================
  # Корректировка атмосферного давления (компенсация высоты)
  # ================================================================
  - platform: template
    sensors:
      livingroom_corrected_pressure:
        unique_id: "livingroom_corrected_pressure"
        friendly_name: "Скорректированное атмосферное давление"
        unit_of_measurement: "мм рт.ст."
        icon_template: "mdi:gauge"
        value_template: >-
          {% set raw_pressure = states('sensor.livingroom_climat_sensor_pressure') | float(default=0) %}
          {% set correction = states('input_number.pressure_correction_value') | float(default=6) %}
          {% if raw_pressure > 0 %}
            {{ (raw_pressure + correction) | round(1) }}
          {% else %}
            {{ 0 }}
          {% endif %}
        availability_template: >-
          {{ states('sensor.livingroom_climat_sensor_pressure') not in ['unknown', 'unavailable'] }}
