################################################################################
# /packages/room_bathroom.yaml
################################################################################
#
# Пакет для управления датчиками и вентиляцией ванной комнаты.
# Здесь собраны настройки и автоматизации для контроля состояния помещения,
# включая датчики движения, влажность и управление вентиляцией.
#
################################################################################

##############################################################################
#                              ГРУППА ДАТЧИКОВ
##############################################################################
group:
  bathroom_motion_sensors:
    name: "Датчики движения в ванной"
    entities:
      - binary_sensor.0x0ceff6fffe693347_occupancy
      - binary_sensor.0x00158d0006ebbef4_occupancy

##############################################################################
#                        СЕНСОР УСРЕДНЁННОЙ ВЛАЖНОСТИ
##############################################################################
sensor:
  - platform: filter
    name: "Влажность ванной (усреднённая за 1 минуту)"
    entity_id: sensor.bathroom_th_2_humidity
    filters:
      - filter: time_simple_moving_average
        window_size: "00:01"
        precision: 2

# Алиас с фиксированным entity_id и unique_id, чтобы везде ссылаться стабильно
template:
  - sensor:
      - name: "bathroom_filtered_humidity" # даст entity_id: sensor.bathroom_filtered_humidity
        unique_id: bathroom_filtered_humidity_alias
        state: "{{ states('sensor.vlazhnost_vannoi_usrednennaia_za_1_minutu') }}"
        unit_of_measurement: "%"
        device_class: humidity
        state_class: measurement
        availability: "{{ states('sensor.vlazhnost_vannoi_usrednennaia_za_1_minutu') not in ['unknown','unavailable',''] }}"
        icon: mdi:water-percent

##############################################################################
#                             ВХОДНЫЕ ПАРАМЕТРЫ
##############################################################################
input_number:
  bathroom_humidity_max_threshold:
    name: "Максимальный порог влажности в ванной"
    initial: 60
    min: 0
    max: 100
    step: 1
    unit_of_measurement: "%"
  bathroom_humidity_min_threshold:
    name: "Минимальный порог влажности в ванной"
    initial: 50
    min: 0
    max: 100
    step: 1
    unit_of_measurement: "%"

##############################################################################
#                                 БИНАРНЫЕ ДАТЧИКИ
##############################################################################
binary_sensor:
  - platform: template
    sensors:
      bathroom_humidity_max:
        unique_id: bathroom_humidity_max
        friendly_name: "Влажность в ванной выше порога"
        device_class: problem
        value_template: >
          {% set humidity_s = states('sensor.bathroom_filtered_humidity') %}
          {% set threshold = states('input_number.bathroom_humidity_max_threshold') | float(0) %}
          {% if humidity_s in ['unknown', 'unavailable', 'none', ''] %}
            false
          {% else %}
            {{ (humidity_s | float(0)) > threshold }}
          {% endif %}

      bathroom_humidity_min:
        unique_id: bathroom_humidity_min
        friendly_name: "Влажность в ванной ниже порога"
        device_class: problem
        value_template: >
          {% set humidity_s = states('sensor.bathroom_filtered_humidity') %}
          {% set threshold = states('input_number.bathroom_humidity_min_threshold') | float(0) %}
          {% if humidity_s in ['unknown', 'unavailable', 'none', ''] %}
            false
          {% else %}
            {{ (humidity_s | float(0)) < threshold }}
          {% endif %}

      bathroom_open_door:
        unique_id: bathroom_open_door
        friendly_name: "Открытие дверей в ванной"
        value_template: >
          {{ is_state('binary_sensor.bathroom_door_inside_contact', 'on') or
             is_state('binary_sensor.bathroom_door_outside_contact', 'on') }}

      bathroom_motions:
        unique_id: bathroom_motions
        friendly_name: "Движение в ванной"
        value_template: >
          {{ is_state('group.bathroom_motion_sensors', 'on') }}

  - platform: template
    sensors:
      no_activity_in_bathroom_recently:
        unique_id: no_activity_in_bathroom_recently
        friendly_name: "Недавняя активность в ванной отсутствует"
        value_template: >-
          {% set door = states.binary_sensor.bathroom_open_door %}
          {% set motion_off = is_state('group.bathroom_motion_sensors', 'off') %}
          {% if door is not none and door.last_changed is not none %}
            {{ motion_off and (as_timestamp(now()) - as_timestamp(door.last_changed)) > 900 }}
          {% else %}
            false
          {% endif %}

##############################################################################
#                                ТАЙМЕРЫ
##############################################################################
timer:
  bathroom_fan_cooldown:
    name: "Продув вентилятора"
    duration: "00:02:00"

##############################################################################
#                             АВТОМАТИЗАЦИИ
##############################################################################
automation:
  # ------------------------------------------------------------------------
  # Ванная: Вытяжка, включение
  # ------------------------------------------------------------------------
  - id: "dc1acbee-6ecd-45a4-8eae-ab69034c3117"
    alias: "Ванная: Вытяжка, включение"
    description: >
      Если влажность выше верхнего порога (bathroom_humidity_max=on),
      и вытяжка сейчас выключена — включаем вентилятор.
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.bathroom_humidity_max
        to: "on"

    conditions:
      # HA полностью загрузился (не выполняем логику в фазу старта)
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"

      # Вентилятор реально сейчас выключен, чтобы не спамить turn_on
      - condition: state
        entity_id: fan.bathroom_relay_l1
        state: "off"

    actions:
      - action: fan.turn_on
        target:
          entity_id: fan.bathroom_relay_l1

  # ------------------------------------------------------------------------
  # Ванная: Запуск таймера продува при снижении влажности
  # ------------------------------------------------------------------------
  - id: "6ebb6fa8-9cd1-4ebd-839d-44d175e6c319"
    alias: "Ванная: Старт продува перед отключением вентилятора"
    description: >
      Когда влажность упала ниже нижнего порога (bathroom_humidity_min=on),
      запускаем таймер продува. По окончании таймера вентилятор будет выключен.
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.bathroom_humidity_min
        to: "on"

    conditions:
      # HA уже загрузился
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"

      # Вентилятор есть смысл дуть только если он сейчас включён
      - condition: state
        entity_id: fan.bathroom_relay_l1
        state: "on"

      # Не запускаем второй таймер, если он уже крутится
      - condition: state
        entity_id: timer.bathroom_fan_cooldown
        state: "idle"

    actions:
      - action: timer.start
        target:
          entity_id: timer.bathroom_fan_cooldown

  # ------------------------------------------------------------------------
  # Ванная: Выключение вентилятора по окончании продува
  # ------------------------------------------------------------------------
  - id: "7a1db18b-0366-47cf-8260-6109b01447f9"
    alias: "Ванная: Выключение вентилятора после продува"
    description: >
      Когда таймер bathroom_fan_cooldown заканчивается, выключаем вентилятор,
      но только если влажность уже стабильно ниже порога (bathroom_humidity_min всё ещё on).
    mode: single
    triggers:
      - trigger: event
        event_type: timer.finished
        event_data:
          entity_id: timer.bathroom_fan_cooldown

    conditions:
      # Только если влажность действительно упала и держится внизу
      - condition: state
        entity_id: binary_sensor.bathroom_humidity_min
        state: "on"

      # Вентилятор всё ещё работает (иначе нечего выключать)
      - condition: state
        entity_id: fan.bathroom_relay_l1
        state: "on"

    actions:
      - action: fan.turn_off
        target:
          entity_id: fan.bathroom_relay_l1
