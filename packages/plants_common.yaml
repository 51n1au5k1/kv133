################################################################################
# /packages/plants_common.yaml
################################################################################
#
# Общий пакет для мониторинга всех растений
# Содержит скрипты, сенсоры и автоматизации, которые могут использоваться
# для любого растения в системе
#
################################################################################

input_number:
  plants_notification_cooldown_hours:
    name: "Растения: интервал между уведомлениями (часы)"
    min: 1
    max: 48
    step: 1
    initial: 3

##############################################################################
#                                  СКРИПТЫ
##############################################################################
script:
  plant_notify:
    description: "Отправляет уведомление о состоянии растения"
    fields:
      plant_name:
        description: "Название растения"
        example: "Фикус лировидный"
      plant_name_latin:
        description: "Латинское название растения для определения изображения"
        example: "ficus_lyrata"
      notification_type:
        description: "Тип уведомления (watering/temperature/illuminance)"
        example: "watering"
      value:
        description: "Значение сенсора"
        example: "30"
      unit:
        description: "Единица измерения"
        example: "%"
    sequence:
      - choose:
          # Уведомление о поливе
          - conditions:
              - condition: template
                value_template: "{{ notification_type == 'watering' }}"
            sequence:
              - service: notify.master
                data:
                  message: "Необходимо полить {{ plant_name }}: влажность почвы {{ value }}{{ unit }}."
                  data:
                    photo:
                      - file: "/config/www/images/plants_alerts/{{ plant_name_latin }}_soil.webp"
                        caption: "Необходимо полить {{ plant_name }}!"
          # Уведомление о температуре
          - conditions:
              - condition: template
                value_template: "{{ notification_type == 'temperature' }}"
            sequence:
              - service: notify.master
                data:
                  message: "{{ plant_name }} необходимо поставить в тёплое место, температура почвы {{ value }}{{ unit }}."
                  data:
                    photo:
                      - file: "/config/www/images/plants_alerts/{{ plant_name_latin }}_cold.webp"
                        caption: "{{ plant_name }} необходимо поставить в тёплое место!"
          # Уведомление об освещенности
          - conditions:
              - condition: template
                value_template: "{{ notification_type == 'illuminance' }}"
            sequence:
              - service: notify.master
                data:
                  message: "{{ plant_name }} необходимо переместить в более освещенное место, освещенность {{ value }}{{ unit }}."
                  data:
                    photo:
                      - file: "/config/www/images/plants_alerts/{{ plant_name_latin }}_light.webp"
                        caption: "{{ plant_name }} нуждается в лучшем освещении!"
      # Запись в историю уведомлений (храним последние 5)
      - variables:
          existing_history: >-
            {% set hist = states('input_text.notification_history_' ~ plant_name_latin) %}
            {{ '' if hist in ['unknown','unavailable', None] else hist }}
      - service: input_text.set_value
        data:
          entity_id: "input_text.notification_history_{{ plant_name_latin }}"
          value: >-
            {% set lines = existing_history.splitlines() if existing_history else [] %}
            {% set type_ru =
              'поливе' if notification_type == 'watering'
              else 'температуре' if notification_type == 'temperature'
              else 'освещенности' %}
            {% set new_entry = "Уведомление о " ~ type_ru ~
                               " (" ~ plant_name ~ "): " ~ now().strftime('%Y-%m-%d %H:%M:%S') %}
            {% set keep = (lines[-4:] if lines|length >= 4 else lines) %}
            {{ (keep + [new_entry]) | join('\n') }}

  plant_check_conditions:
    description: "Проверяет условия ухода за растением и отправляет уведомления при необходимости"
    fields:
      plant_name:
        description: "Название растения"
        example: "Фикус лировидный"
      plant_name_latin:
        description: "Латинское название растения (используется для имен сущностей)"
        example: "ficus_lyrata"
    sequence:
      # Переменные по сущностям
      - variables:
          soil_entity: "binary_sensor.plant_alert_{{ plant_name_latin }}_soil"
          temperature_entity: "binary_sensor.plant_alert_{{ plant_name_latin }}_temperature"
          illuminance_entity: "binary_sensor.plant_alert_{{ plant_name_latin }}_illuminance"
          soil_sensor: "sensor.{{ plant_name_latin }}_filtered_soil_moisture"
          temperature_sensor: "sensor.{{ plant_name_latin }}_filtered_temperature"
          illuminance_sensor: "sensor.{{ plant_name_latin }}_filtered_illuminance"
          soil_notification: "input_datetime.last_{{ plant_name_latin }}_soil_notification"
          temperature_notification: "input_datetime.last_{{ plant_name_latin }}_temperature_notification"
          illuminance_notification: "input_datetime.last_{{ plant_name_latin }}_illuminance_notification"
          cooldown_sec: "{{ (states('input_number.plants_notification_cooldown_hours') | float(3) * 3600) | int }}"
      # Полив
      - if:
          condition: template
          value_template: >-
            {% set last = states(soil_notification) %}
            {% set last_ts = as_timestamp(last) if last not in ['unknown','unavailable','none'] else 0 %}
            {{ is_state(soil_entity,'on') and (now().timestamp() - last_ts) > cooldown_sec }}
        then:
          - service: script.plant_notify
            data:
              plant_name: "{{ plant_name }}"
              plant_name_latin: "{{ plant_name_latin }}"
              notification_type: "watering"
              value: "{{ states(soil_sensor) }}"
              unit: "%"
          - service: input_datetime.set_datetime
            data:
              entity_id: "{{ soil_notification }}"
              datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Температура
      - if:
          condition: template
          value_template: >-
            {% set last = states(temperature_notification) %}
            {% set last_ts = as_timestamp(last) if last not in ['unknown','unavailable','none'] else 0 %}
            {{ is_state(temperature_entity,'on') and (now().timestamp() - last_ts) > cooldown_sec }}
        then:
          - service: script.plant_notify
            data:
              plant_name: "{{ plant_name }}"
              plant_name_latin: "{{ plant_name_latin }}"
              notification_type: "temperature"
              value: "{{ states(temperature_sensor) }}"
              unit: "°C"
          - service: input_datetime.set_datetime
            data:
              entity_id: "{{ temperature_notification }}"
              datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Освещенность (если сенсор поддерживается)
      - if:
          condition: template
          value_template: >-
            {% set last = states(illuminance_notification) %}
            {% set last_ts = as_timestamp(last) if last not in ['unknown','unavailable','none'] else 0 %}
            {{ is_state(illuminance_entity,'on')
               and states(illuminance_sensor) not in ['unknown','unavailable','none']
               and (now().timestamp() - last_ts) > cooldown_sec }}
        then:
          - service: script.plant_notify
            data:
              plant_name: "{{ plant_name }}"
              plant_name_latin: "{{ plant_name_latin }}"
              notification_type: "illuminance"
              value: "{{ states(illuminance_sensor) }}"
              unit: "лк"
          - service: input_datetime.set_datetime
            data:
              entity_id: "{{ illuminance_notification }}"
              datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

  check_all_plants:
    description: "Проверяет состояние всех растений и отправляет уведомления при необходимости"
    sequence:
      - variables:
          cooldown_sec: "{{ (states('input_number.plants_notification_cooldown_hours') | float(3) * 3600) | int }}"
      # Фикус (если есть хотя бы одно условие и кулдаун истёк — запускаем общий чек)
      - if:
          condition: template
          value_template: >-
            {% set soil = is_state('binary_sensor.plant_alert_ficus_lyrata_soil','on') %}
            {% set temp = is_state('binary_sensor.plant_alert_ficus_lyrata_temperature','on') %}
            {% set last_soil = states('input_datetime.last_ficus_lyrata_soil_notification') %}
            {% set last_temp = states('input_datetime.last_ficus_lyrata_temperature_notification') %}
            {% set lts = as_timestamp(last_soil) if last_soil not in ['unknown','unavailable','none'] else 0 %}
            {% set ltt = as_timestamp(last_temp) if last_temp not in ['unknown','unavailable','none'] else 0 %}
            {{ (soil and (now().timestamp()-lts) > cooldown_sec) or
               (temp and (now().timestamp()-ltt) > cooldown_sec) }}
        then:
          - service: script.plant_check_conditions
            data:
              plant_name: "Фикус лировидный"
              plant_name_latin: "ficus_lyrata"
      # Молочай (почва/температура/освещённость)
      - if:
          condition: template
          value_template: >-
            {% set soil = is_state('binary_sensor.plant_alert_euphorbia_leuconeura_soil','on') %}
            {% set temp = is_state('binary_sensor.plant_alert_euphorbia_leuconeura_temperature','on') %}
            {% set lux  = is_state('binary_sensor.plant_alert_euphorbia_leuconeura_illuminance','on') %}
            {% set ls = states('input_datetime.last_euphorbia_leuconeura_soil_notification') %}
            {% set lt = states('input_datetime.last_euphorbia_leuconeura_temperature_notification') %}
            {% set ll = states('input_datetime.last_euphorbia_leuconeura_illuminance_notification') %}
            {% set lss = as_timestamp(ls) if ls not in ['unknown','unavailable','none'] else 0 %}
            {% set ltt = as_timestamp(lt) if lt not in ['unknown','unavailable','none'] else 0 %}
            {% set lll = as_timestamp(ll) if ll not in ['unknown','unavailable','none'] else 0 %}
            {{ (soil and (now().timestamp()-lss) > cooldown_sec) or
               (temp and (now().timestamp()-ltt) > cooldown_sec) or
               (lux  and (now().timestamp()-lll) > cooldown_sec) }}
        then:
          - service: script.plant_check_conditions
            data:
              plant_name: "Молочай"
              plant_name_latin: "euphorbia_leuconeura"

##############################################################################
#                             АВТОМАТИЗАЦИИ
##############################################################################
automation:
  - id: "plant-send-pending-notifications"
    alias: "Растения: Отправка отложенных уведомлений при возвращении домой"
    description: "Если накопились уведомления за время отсутствия — отправим их по приходу."
    mode: single
    trigger:
      - platform: state
        entity_id: person.master
        to: "home"
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
    action:
      - delay: "00:01:00" # даём сенсорам обновиться
      - service: script.check_all_plants
