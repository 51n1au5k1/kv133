################################################################################
# /packages/proxmox_helper.yaml
################################################################################
#
# Пакет вспомогательных конфигураций для работы с Proxmox Virtual Environment
# (система виртуализации с открытым исходным кодом). Этот пакет предоставляет
# инструменты для мониторинга и управления ресурсами виртуальных машин (VM) и
# контейнеров (LXC) в Proxmox, включая нормализацию данных о загрузке CPU.
#

##############################################################################
#                          ВХОДНЫЕ ЧИСЛА (input_number)
##############################################################################
# Позволяют задать количество процессоров, выделенных для каждой VM или LXC,
# чтобы нормализовать данные о загрузке CPU.

input_number:
  cpu_100:
    name: "CPU 100"
    min: 1
    max: 4
    step: 1
    initial: 2

  cpu_101:
    name: "CPU 101"
    min: 1
    max: 4
    step: 1
    initial: 1

  cpu_102:
    name: "CPU 102"
    min: 1
    max: 4
    step: 1
    initial: 1

  cpu_103:
    name: "CPU 103"
    min: 1
    max: 4
    step: 1
    initial: 2

  cpu_104:
    name: "CPU 104"
    min: 1
    max: 4
    step: 1
    initial: 2

  cpu_105:
    name: "CPU 105"
    min: 1
    max: 4
    step: 1
    initial: 1

  cpu_106:
    name: "CPU 106"
    min: 1
    max: 4
    step: 1
    initial: 1

##############################################################################
#                                 СЕНСОРЫ
##############################################################################
# Шаблонные сенсоры нормализуют данные о загрузке CPU, деля текущую загрузку
# на количество выделенных процессоров. Округление — до двух знаков.

sensor:
  - platform: template
    sensors:
      qemu_haos12_3_100_cpu_used_normalized:
        friendly_name: "CPU VM HAOS12 (нормализованная)"
        value_template: >-
          {% set raw = states('sensor.qemu_haos12_3_100_cpu_used') | float(0) %}
          {% set cpus = states('input_number.cpu_100') | float(0) %}
          {{ (raw / cpus) | round(2) if cpus > 0 else 0 }}

      lxc_mariadb_101_cpu_used_normalized:
        friendly_name: "CPU LXC MariaDB (нормализованная)"
        value_template: >-
          {% set raw = states('sensor.lxc_mariadb_101_cpu_used') | float(0) %}
          {% set cpus = states('input_number.cpu_101') | float(0) %}
          {{ (raw / cpus) | round(2) if cpus > 0 else 0 }}

      lxc_jackett_102_cpu_used_normalized:
        friendly_name: "CPU LXC Jackett (нормализованная)"
        value_template: >-
          {% set raw = states('sensor.lxc_jackett_102_cpu_used') | float(0) %}
          {% set cpus = states('input_number.cpu_102') | float(0) %}
          {{ (raw / cpus) | round(2) if cpus > 0 else 0 }}

      lxc_jellyfin_103_cpu_used_normalized:
        friendly_name: "CPU LXC Jellyfin (нормализованная)"
        value_template: >-
          {% set raw = states('sensor.lxc_jellyfin_103_cpu_used') | float(0) %}
          {% set cpus = states('input_number.cpu_103') | float(0) %}
          {{ (raw / cpus) | round(2) if cpus > 0 else 0 }}

      lxc_deluge_104_cpu_used_normalized:
        friendly_name: "CPU LXC Deluge (нормализованная)"
        value_template: >-
          {% set raw = states('sensor.lxc_deluge_104_cpu_used') | float(0) %}
          {% set cpus = states('input_number.cpu_104') | float(0) %}
          {{ (raw / cpus) | round(2) if cpus > 0 else 0 }}

      lxc_debian_105_cpu_used_normalized:
        friendly_name: "CPU LXC TorrServer (нормализованная)"
        value_template: >-
          {% set raw = states('sensor.lxc_debian_105_cpu_used') | float(0) %}
          {% set cpus = states('input_number.cpu_105') | float(0) %}
          {{ (raw / cpus) | round(2) if cpus > 0 else 0 }}

      lxc_lyrionmusicserver_106_cpu_used_normalized:
        friendly_name: "CPU LXC Lyrion Music Server (нормализованная)"
        value_template: >-
          {% set raw = states('sensor.lxc_lyrionmusicserver_106_cpu_used') | float(0) %}
          {% set cpus = states('input_number.cpu_106') | float(0) %}
          {{ (raw / cpus) | round(2) if cpus > 0 else 0 }}

# Описание функционала:
# - input_number.cpu_<ID> задаёт число процессоров для каждой VM/LXC.
# - Для каждого ресурса существует свой шаблонный сенсор, который:
#     1) Берёт текущее значение загрузки CPU (sensor.qemu_… или sensor.lxc_…).
#     2) Делит на число процессоров (input_number.cpu_<ID>).
#     3) Округляет результат до двух знаков.
#     4) Если cpus = 0 (хотя у нас min:1), возвращает 0, чтобы избежать деления на ноль.

# Примечание:
# Для корректной работы необходимо, чтобы исходные сенсоры:
#   sensor.qemu_haos12_3_100_cpu_used
#   sensor.lxc_mariadb_101_cpu_used
#   sensor.lxc_jackett_102_cpu_used
#   sensor.lxc_jellyfin_103_cpu_used
#   sensor.lxc_deluge_104_cpu_used
#   sensor.lxc_debian_105_cpu_used
#   sensor.lxc_lyrionmusicserver_106_cpu_used
# были настроены и возвращали числовые значения нагрузки CPU.
