################################################################################
# /packages/room_server.yaml
################################################################################
#
# Назначение:
#   Данный пакет Home Assistant управляет мониторингом состояния розеток,
#   подключённых к ИБП, и отправляет уведомления в случае их недоступности.
#   Также создаются бинарные сенсоры, которые показывают, когда устройства
#   находятся в режиме профилактики ИБП (розетки отключены по расписанию).
#   Добавлена автоматизация управления вентилятором серверной в зависимости
#   от температуры.
#
# Структура:
#   binary_sensor:
#     1) "Роутер на профилактике ИБП" — показывает, отключена ли розетка
#        для роутера (switch.my_multi_outlet_left).
#     2) "МиниПК на профилактике ИБП" — показывает, отключена ли розетка
#        для миниПК (switch.my_multi_outlet_right).
#
#   automation:
#     1) "Уведомление: Розетка недоступна (электричество отключено)" —
#        отправляет уведомление, если розетка становится недоступной.
#     2) "Контроль температуры серверной: управление вентилятором" —
#        включает/выключает вентилятор при достижении пороговых температур.
#
# Особенности:
#   • Бинарные сенсоры используют шаблоны (template) для отображения состояния
#     розеток и динамической смены иконок (mdi:power-plug / mdi:power-plug-off).
#   • Автоматизация проверяет состояние розеток в течение 1 минуты, чтобы
#     избежать ложных срабатываний.
#   • Уведомление отправляется через сервис notify.master с указанием,
#     какая именно розетка недоступна.
#   • Управление вентилятором использует гистерезис (33°C для включения,
#     31°C для выключения) для предотвращения частых переключений.
#
################################################################################

binary_sensor:
  # ----------------------------------------------------------------------------
  # 1) БИНАРНЫЙ СЕНСОР: РОУТЕР НА ПРОФИЛАКТИКЕ ИБП
  # ----------------------------------------------------------------------------
  # Сенсор, который показывает, отключена ли розетка для роутера
  # (switch.my_multi_outlet_left). Если розетка выключена, сенсор показывает
  # "on" и отображает иконку mdi:power-plug-off.
  #
  - platform: template
    sensors:
      ups_maintenance_router:
        friendly_name: "Роутер на профилактике ИБП"
        value_template: >-
          {{ is_state('switch.my_multi_outlet_left', 'off') }}
        icon_template: >-
          {% if is_state('switch.my_multi_outlet_left', 'off') %}
            mdi:power-plug-off
          {% else %}
            mdi:power-plug
          {% endif %}

      # ----------------------------------------------------------------------------
      # 2) БИНАРНЫЙ СЕНСОР: МИНИПК НА ПРОФИЛАКТИКЕ ИБП
      # ----------------------------------------------------------------------------
      # Сенсор, который показывает, отключена ли розетка для миниПК
      # (switch.my_multi_outlet_right). Если розетка выключена, сенсор показывает
      # "on" и отображает иконку mdi:power-plug-off.
      #
      ups_maintenance_minipc:
        friendly_name: "МиниПК на профилактике ИБП"
        value_template: >-
          {{ is_state('switch.my_multi_outlet_right', 'off') }}
        icon_template: >-
          {% if is_state('switch.my_multi_outlet_right', 'off') %}
            mdi:power-plug-off
          {% else %}
            mdi:power-plug
          {% endif %}

##############################################################################
#                             АВТОМАТИЗАЦИИ
##############################################################################
automation:
  # ----------------------------------------------------------------------------
  # АВТОМАТИЗАЦИЯ: УВЕДОМЛЕНИЕ О НЕДОСТУПНОСТИ РОЗЕТКИ
  # ----------------------------------------------------------------------------
  # Автоматизация, которая отправляет уведомление, если одна из розеток
  # (switch.my_multi_outlet_left или switch.my_multi_outlet_right) становится
  # недоступной (unavailable). Это может указывать на отключение электричества
  # или проблемы с ИБП.
  #
  - id: "12858001-138d-4238-97f9-e5a501c6fe18"
    alias: "Уведомление: Розетка недоступна (электричество отключено)"
    description: >
      Отправляет уведомление, если розетка недоступна (например, при отключении
      электричества или проблемах с ИБП).
    triggers:
      - platform: state
        entity_id:
          - switch.my_multi_outlet_left
          - switch.my_multi_outlet_right
        to: "unavailable"
    actions:
      - service: notify.master
        data:
          message: >-
            ⚠️ Внимание! Розетка {{ trigger.entity_id }} недоступна.
            Возможно, отключено электричество или проблемы с ИБП.
    mode: single

  # ----------------------------------------------------------------------------
  # АВТОМАТИЗАЦИЯ: КОНТРОЛЬ ТЕМПЕРАТУРЫ СЕРВЕРНОЙ
  # ----------------------------------------------------------------------------
  # Автоматизация, которая управляет вентилятором серверной (fan.server_fan)
  # на основе показаний датчика температуры (sensor.0xa4c13861a18df7c8_temperature).
  # Вентилятор включается при превышении 30°C и выключается при снижении ниже 31°C,
  # что предотвращает частые переключения (гистерезис).
  #
  - id: "server_room_fan_control"
    alias: "Контроль температуры серверной: управление вентилятором"
    description: >
      Управляет вентилятором серверной на основе температуры. 
      Включает при >30°C, выключает при <31°C (гистерезис).
    triggers:
      - platform: numeric_state
        entity_id: sensor.0xa4c13861a18df7c8_temperature
        above: 30
        for:
          minutes: 2
      - platform: numeric_state
        entity_id: sensor.0xa4c13861a18df7c8_temperature
        below: 31
        for:
          minutes: 30
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state | float > 30 }}"
            sequence:
              - service: fan.turn_on
                target:
                  entity_id: fan.server_fan
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state | float < 31 }}"
            sequence:
              - service: fan.turn_off
                target:
                  entity_id: fan.server_fan
    mode: single
