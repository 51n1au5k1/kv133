################################################################################
# /packages/room_server.yaml
################################################################################
#
# Назначение:
#   Данный пакет Home Assistant управляет мониторингом состояния розеток,
#   подключённых к ИБП, и отправляет уведомления в случае их недоступности.
#   Также создаются бинарные сенсоры, которые показывают, когда устройства
#   находятся в режиме профилактики ИБП (розетки отключены по расписанию).
#   Добавлена автоматизация управления вентилятором серверной в зависимости
#   от температуры.
#
# Доработки:
#   - Добавлен binary_sensor для температуры с гистерезисом (high/low пороги).
#   - Input_number для настраиваемых порогов температуры.
#   - Timer для delay_off вентилятора.
#   - silent_mode/startup_phase в уведомлениях.
#   - Логирование и проверки на unavailable/someone_is_home.
#
################################################################################

input_number:
  server_temp_high_threshold:
    name: "Порог высокой температуры сервера (°C)"
    min: 25
    max: 40
    step: 1
    initial: 30
  server_temp_low_threshold:
    name: "Порог низкой температуры сервера (°C)"
    min: 20
    max: 35
    step: 1
    initial: 28
  server_temp_off_persist_min:
    name: "Сервер: устойчиво низкая температура (мин)"
    min: 5
    max: 60
    step: 5
    initial: 30
  server_fan_delay_min:
    name: "Сервер: задержка выключения вентилятора (мин)"
    min: 1
    max: 30
    step: 1
    initial: 5

binary_sensor:
  # ----------------------------------------------------------------------------
  # 1) РОУТЕР НА ПРОФИЛАКТИКЕ ИБП
  # ----------------------------------------------------------------------------
  - platform: template
    sensors:
      ups_maintenance_router:
        unique_id: ups_maintenance_router
        friendly_name: "Роутер на профилактике ИБП"
        device_class: problem
        availability_template: >
          {{ states('switch.my_multi_outlet_left') not in ['unknown','unavailable',''] }}
        value_template: >
          {{ is_state('switch.my_multi_outlet_left', 'off') }}
        icon_template: >-
          {% if is_state('switch.my_multi_outlet_left', 'off') %}
            mdi:power-plug-off
          {% else %}
            mdi:power-plug
          {% endif %}

      # ----------------------------------------------------------------------------
      # 2) МИНИПК НА ПРОФИЛАКТИКЕ ИБП
      # ----------------------------------------------------------------------------
      ups_maintenance_minipc:
        unique_id: ups_maintenance_minipc
        friendly_name: "МиниПК на профилактике ИБП"
        device_class: problem
        availability_template: >
          {{ states('switch.my_multi_outlet_right') not in ['unknown','unavailable',''] }}
        value_template: >
          {{ is_state('switch.my_multi_outlet_right', 'off') }}
        icon_template: >-
          {% if is_state('switch.my_multi_outlet_right', 'off') %}
            mdi:power-plug-off
          {% else %}
            mdi:power-plug
          {% endif %}

      # ----------------------------------------------------------------------------
      # 3) ВЫСОКАЯ ТЕМПЕРАТУРА СЕРВЕРА (ГИСТЕРЕЗИС)
      # ----------------------------------------------------------------------------
      server_temp_high:
        unique_id: server_temp_high
        friendly_name: "Высокая температура сервера"
        device_class: problem
        availability_template: >
          {{ states('sensor.0xa4c13861a18df7c8_temperature') not in ['unknown','unavailable',''] }}
        value_template: >
          {% set temp = states('sensor.0xa4c13861a18df7c8_temperature') | float(0) %}
          {% set high = states('input_number.server_temp_high_threshold') | float(30) %}
          {% set low  = states('input_number.server_temp_low_threshold')  | float(28) %}
          {% set was_on = is_state('binary_sensor.server_temp_high','on') %}
          {{ (temp > low) if was_on else (temp > high) }}
        delay_on:
          minutes: 2    # устойчиво «высоко» 2 мин

timer:
  server_temp_off_persist:
    name: "Сервер: подтверждение низкой температуры"
    duration: "00:30:00"  # Базовое; фактическая длительность задаётся при старте
  server_fan_delay:
    name: "Сервер: задержка выключения вентилятора"
    duration: "00:05:00"  # Базовое; фактическая длительность задаётся при старте

automation:
  # ----------------------------------------------------------------------------
  # УВЕДОМЛЕНИЕ О НЕДОСТУПНОСТИ РОЗЕТКИ
  # ----------------------------------------------------------------------------
  - id: "12858001-138d-4238-97f9-e5a501c6fe18"
    alias: "Уведомление: Розетка недоступна (электричество отключено)"
    description: "Уведомляет, если розетка стала недоступной (ИБП/электричество)."
    mode: single
    trigger:
      - platform: state
        entity_id:
          - switch.my_multi_outlet_left
          - switch.my_multi_outlet_right
        to: "unavailable"
        for:
          minutes: 1
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
      - condition: state
        entity_id: input_boolean.silent_mode
        state: "off"
      - condition: state
        entity_id: binary_sensor.someone_is_home
        state: "on"
    action:
      - service: notify.master
        data:
          message: >
            ⚠️ Внимание! Розетка {{ trigger.entity_id }} недоступна.
            Возможно, отключено электричество или проблемы с ИБП.
      - service: system_log.write
        data:
          message: "Розетка {{ trigger.entity_id }} недоступна — уведомление отправлено."
          level: warning

  # ----------------------------------------------------------------------------
  # КОНТРОЛЬ ТЕМПЕРАТУРЫ СЕРВЕРНОЙ: ВЕНТИЛЯТОР
  # ----------------------------------------------------------------------------
  - id: "server_room_fan_control"
    alias: "Контроль температуры серверной: управление вентилятором"
    description: "High — включаем вентилятор; Off — запускаем подтверждение низкой температуры."
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.server_temp_high
        from: "off"
        to: "on"
        id: high
      - platform: state
        entity_id: binary_sensor.server_temp_high
        from: "on"
        to: "off"
        id: low
    condition:
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"
      - condition: template
        value_template: >
          {{ states('sensor.0xa4c13861a18df7c8_temperature') not in ['unknown','unavailable'] }}
    action:
      - choose:
          - conditions:
              - condition: trigger
                id: high
            sequence:
              - service: timer.cancel
                target:
                  entity_id:
                    - timer.server_temp_off_persist
                    - timer.server_fan_delay
              - service: fan.turn_on
                target:
                  entity_id: fan.server_fan
              - service: system_log.write
                data:
                  message: "Вентилятор сервера включён (темп: {{ states('sensor.0xa4c13861a18df7c8_temperature') }}°)."
                  level: info
          - conditions:
              - condition: trigger
                id: low
              - condition: state
                entity_id: fan.server_fan
                state: "on"
            sequence:
              - service: timer.start
                target:
                  entity_id: timer.server_temp_off_persist
                data:
                  duration: "{{ (states('input_number.server_temp_off_persist_min') | float(30) * 60) | int }}"
              - service: system_log.write
                data:
                  message: "Запущен таймер подтверждения низкой температуры сервера."
                  level: info

  # ----------------------------------------------------------------------------
  # СТАБИЛЬНО НИЗКАЯ ТЕМПЕРАТУРА: ЗАПУСК ЗАДЕРЖКИ ВЫКЛЮЧЕНИЯ ВЕНТИЛЯТОРА
  # ----------------------------------------------------------------------------
  - id: "server_temp_off_persist_finished"
    alias: "Сервер: стабильная низкая температура — задержка выключения вентилятора"
    description: "После подтверждённо низкой температуры запускаем задержку выключения вентилятора."
    mode: single
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.server_temp_off_persist
    condition:
      - condition: state
        entity_id: binary_sensor.server_temp_high
        state: "off"
      - condition: state
        entity_id: fan.server_fan
        state: "on"
    action:
      - service: timer.start
        target:
          entity_id: timer.server_fan_delay
        data:
          duration: "{{ (states('input_number.server_fan_delay_min') | float(5) * 60) | int }}"
      - service: system_log.write
        data:
          message: "Запущен таймер задержки выключения вентилятора сервера."
          level: info

  # ----------------------------------------------------------------------------
  # ВЫКЛЮЧЕНИЕ ВЕНТИЛЯТОРА ПО ТАЙМЕРУ
  # ----------------------------------------------------------------------------
  - id: "server_fan_delay_off"
    alias: "Выключение вентилятора сервера по таймеру"
    description: "Выключает вентилятор после таймера, если температура всё ещё низкая."
    mode: single
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.server_fan_delay
    condition:
      - condition: state
        entity_id: binary_sensor.server_temp_high
        state: "off"
    action:
      - service: fan.turn_off
        target:
          entity_id: fan.server_fan
      - service: system_log.write
        data:
          message: "Вентилятор сервера выключен по таймеру (темп: {{ states('sensor.0xa4c13861a18df7c8_temperature') }}°)."
          level: info