################################################################################
# /packages/room_bedroom.yaml
################################################################################
#
# Назначение:
#   Управление розетками для зарядки устройств и уведомления о низкой температуре
#   в спальне с использованием усреднённого значения.
#
# Доработки:
#   - Добавлен гистерезис (for: в триггерах) для стабильности.
#   - Использование таймера для сброса флага (гибче delay).
#   - Добавлены silent_mode/system_startup_phase во все автоматизации.
#   - TTS в уведомлении (опционально, из yandex_helper.yaml).
#   - Логирование и проверки на someone_is_home/unavailable.
#
################################################################################

sensor:
  # Сенсор для усреднённого значения температуры в спальне
  - platform: filter
    name: "Температура в спальне (сглаженная)"
    entity_id: sensor.bedroom_th_sensor_temperature
    filters:
      - filter: time_simple_moving_average
        window_size: "00:02"
        precision: 2

input_boolean:
  bedroom_th_notice:
    name: "Спальня: Сенсор уведомлений о температуре"
    initial: false
    icon: mdi:bell-ring

timer:
  bedroom_th_notice_reset:
    name: "Сброс уведомления о температуре в спальне"
    duration: "00:20:00" # Базовое; при старте можно переопределять

automation:
  # ------------------------------------------------------------------------
  # ЭКОНОМИЯ ЭНЕРГИИ: ОТКЛЮЧЕНИЕ РОЗЕТКИ ПРИ ЗАРЯДКЕ НОЧЬЮ
  # ------------------------------------------------------------------------
  - id: "a658b6fc-d264-4c6b-8185-e3b503f5a7e5"
    alias: "Спальня: Отключение розетки при зарядке телефона Андрея ночью"
    description: >
      Если Pixel 8 Pro заряжен почти полностью ночью, отключаем розетку,
      чтобы не жарить батарею до утра.
    mode: single
    triggers:
      - trigger: numeric_state
        entity_id: sensor.pixel_8_pro_battery_level
        above: 99
        for:
          minutes: 1

    conditions:
      # телефон реально заряжается
      - condition: state
        entity_id: sensor.pixel_8_pro_battery_state
        state: "charging"

      # только ночной интервал
      - condition: time
        after: "01:00:00"
        before: "07:00:00"

      # HA уже полностью поднялся
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"

      # валидные данные по батарее
      - condition: template
        value_template: >-
          {{ states('sensor.pixel_8_pro_battery_level') not in ['unknown', 'unavailable', ''] }}

      # розетка действительно включена (есть что отключать)
      - condition: state
        entity_id: switch.0x00158d0002530ba3
        state: "on"

    actions:
      - action: switch.turn_off
        target:
          entity_id: switch.0x00158d0002530ba3

      - action: system_log.write
        data:
          message: >-
            Розетка зарядки телефона отключена ночью.
            Текущий заряд: {{ states('sensor.pixel_8_pro_battery_level') }}%.
          level: info

  # ----------------------------------------------------------------------------
  # Уведомление: Температура в спальне ниже 20° при открытой двери/окне
  # ----------------------------------------------------------------------------
  - id: "9f1229c2-0ce2-4483-9953-1f6cdc6fa18e"
    alias: "Уведомление о низкой температуре в спальне (усреднённое значение)"
    description: >
      Если температура в спальне <20°C дольше минуты при открытом балконе —
      предупредить (но не во время старта HA и не в тихом режиме).
    mode: single
    triggers:
      - trigger: numeric_state
        entity_id: sensor.temperatura_v_spalne_sglazhennaia
        below: 20
        for:
          minutes: 1

    conditions:
      # HA не в фазе запуска
      - condition: state
        entity_id: input_boolean.system_startup_phase
        state: "off"

      # не в тихом режиме — чтобы не орать в ночи
      - condition: state
        entity_id: input_boolean.silent_mode
        state: "off"

      # балкон (или окно спальни) реально открыт => есть причина для холода
      - condition: state
        entity_id: binary_sensor.0x00158d00044d5d11_contact
        state: "on"

      # кто-то дома, иначе спам в пустую
      - condition: state
        entity_id: binary_sensor.someone_is_home
        state: "on"

      # сенсор температуры не unavailable
      - condition: template
        value_template: >-
          {{ states('sensor.temperatura_v_spalne_sglazhennaia') not in ['unknown', 'unavailable', ''] }}

      # мы ещё не уведомляли недавно
      - condition: state
        entity_id: input_boolean.bedroom_th_notice
        state: "off"

    actions:
      - variables:
          message: >-
            Температура в спальне ниже 20°. Закройте балкон в спальне.

      # телега + голос (если мастер дома)
      - choose:
          - conditions:
              - condition: state
                entity_id: person.master
                state: "home"
            sequence:
              - action: notify.master
                data:
                  message: "{{ message }}"

              # если у тебя есть голосовой скрипт для температуры — он остаётся
              - action: script.yandex_tts_temp_status

      # ставим флаг "я уже предупредил"
      - action: input_boolean.turn_on
        target:
          entity_id: input_boolean.bedroom_th_notice

      # запускаем таймер авто-сброса флага, чтобы потом разрешить новые уведомления
      - action: timer.start
        target:
          entity_id: timer.bedroom_th_notice_reset
        data:
          duration: "00:{{ states('input_number.low_th_notification_reset_period') | int }}:00"

      - action: system_log.write
        data:
          message: >-
            Уведомление о низкой температуре в спальне отправлено.
            T={{ states('sensor.temperatura_v_spalne_sglazhennaia') }}°C.
          level: info

  # ----------------------------------------------------------------------------
  # Сброс уведомлений по таймеру
  # ----------------------------------------------------------------------------
  - id: "fdf3d865-6bdb-4c9b-9acd-fa7f7dc432d6"
    alias: "HELPER: Сброс уведомлений о температуре в спальне"
    description: "Когда истекает таймер bedroom_th_notice_reset — разрешаем снова слать предупреждения."
    mode: single

    triggers:
      - trigger: event
        event_type: timer.finished
        event_data:
          entity_id: timer.bedroom_th_notice_reset

    conditions: []

    actions:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.bedroom_th_notice

      - action: system_log.write
        data:
          message: "Флаг bedroom_th_notice сброшен (спальня)."
          level: info
